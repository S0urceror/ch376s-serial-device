                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module device
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _set_usb_host_mode
                                     12 	.globl _check_exists
                                     13 	.globl _handleEP0OUT
                                     14 	.globl _handleEP0IN
                                     15 	.globl _handleEP0Setup
                                     16 	.globl _handleEP0SetupStandard
                                     17 	.globl _handleEP0SetupClass
                                     18 	.globl _read_and_process_data
                                     19 	.globl _read_and_send_host
                                     20 	.globl _print_memory
                                     21 	.globl _handleIHX
                                     22 	.globl _convertToStr
                                     23 	.globl _convertHex
                                     24 	.globl _set_target_device_address
                                     25 	.globl _read_usb_data
                                     26 	.globl _writeDataForEndpoint2
                                     27 	.globl _writeDataForEndpoint0
                                     28 	.globl _sendEP0STALL
                                     29 	.globl _sendEP0NAK
                                     30 	.globl _sendEP0ACK
                                     31 	.globl _strupr
                                     32 	.globl _host_putchar
                                     33 	.globl _host_readByte
                                     34 	.globl _host_go
                                     35 	.globl _writeData
                                     36 	.globl _writeCommand
                                     37 	.globl _host_delay
                                     38 	.globl _host_save
                                     39 	.globl _host_load
                                     40 	.globl _readData
                                     41 	.globl _host_writeByte
                                     42 	.globl _host_reset
                                     43 	.globl _toupper
                                     44 	.globl _uart_parameters
                                     45 	.globl _request
                                     46 	.globl _pstrMonitorCmdArgs
                                     47 	.globl _strMonitorCmdArgs
                                     48 	.globl _ihx_output_line
                                     49 	.globl _ihx_bytes_processed
                                     50 	.globl _strMonitorEcho
                                     51 	.globl _IHX_TEMPLATE
                                     52 	.globl _NEWLINE_MSG
                                     53 	.globl _BYTES_MSG_ROM
                                     54 	.globl _UNKNOWN_MSG
                                     55 	.globl _WELCOME_MSG
                                     56 	.globl _PRODUCER_SN_Des
                                     57 	.globl _PRODUCER_Des
                                     58 	.globl _MANUFACTURER_Des
                                     59 	.globl _LangDes
                                     60 	.globl _ConDes
                                     61 	.globl _DevDes
                                     62 	.globl _device_reset
                                     63 	.globl _device_monitor_reset
                                     64 	.globl _device_send
                                     65 	.globl _device_send_welcome
                                     66 	.globl _device_interrupt
                                     67 	.globl _device_init
                                     68 ;--------------------------------------------------------
                                     69 ; special function registers
                                     70 ;--------------------------------------------------------
                                     71 ;--------------------------------------------------------
                                     72 ; ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area _DATA
      000000                         75 _strMonitorEcho::
      000000                         76 	.ds 65
      000041                         77 _ihx_bytes_processed::
      000041                         78 	.ds 34
      000063                         79 _ihx_output_line::
      000063                         80 	.ds 46
      000091                         81 _strMonitorCmdArgs::
      000091                         82 	.ds 65
      0000D2                         83 _pstrMonitorCmdArgs::
      0000D2                         84 	.ds 2
      0000D4                         85 _request::
      0000D4                         86 	.ds 64
      000114                         87 _uart_parameters::
      000114                         88 	.ds 7
                                     89 ;--------------------------------------------------------
                                     90 ; ram data
                                     91 ;--------------------------------------------------------
                                     92 	.area _INITIALIZED
                                     93 ;--------------------------------------------------------
                                     94 ; absolute external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area _DABS (ABS)
                                     97 ;--------------------------------------------------------
                                     98 ; global & static initialisations
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _GSINIT
                                    102 	.area _GSFINAL
                                    103 	.area _GSINIT
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area _HOME
                                    108 	.area _HOME
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area _CODE
                                    113 ;device.c:32: char * strupr (char *str) 
                                    114 ;	---------------------------------
                                    115 ; Function strupr
                                    116 ; ---------------------------------
      000000                        117 _strupr::
      000000 DD E5            [15]  118 	push	ix
                                    119 ;device.c:34: char *ret = str;
      000002 21 04 00         [10]  120 	ld	hl, #0 + 4
      000005 39               [11]  121 	add	hl, sp
      000006 4E               [ 7]  122 	ld	c, (hl)
      000007 23               [ 6]  123 	inc	hl
      000008 46               [ 7]  124 	ld	b, (hl)
                                    125 ;device.c:36: while (*str)
      000009 59               [ 4]  126 	ld	e, c
      00000A 50               [ 4]  127 	ld	d, b
      00000B                        128 00101$:
      00000B 1A               [ 7]  129 	ld	a, (de)
      00000C B7               [ 4]  130 	or	a, a
      00000D 28 11            [12]  131 	jr	Z, 00103$
                                    132 ;device.c:38: *str = toupper (*str);
      00000F 6F               [ 4]  133 	ld	l, a
      000010 26 00            [ 7]  134 	ld	h, #0x00
      000012 C5               [11]  135 	push	bc
      000013 D5               [11]  136 	push	de
      000014 E5               [11]  137 	push	hl
      000015 CDr00r00         [17]  138 	call	_toupper
      000018 F1               [10]  139 	pop	af
      000019 D1               [10]  140 	pop	de
      00001A C1               [10]  141 	pop	bc
      00001B 7D               [ 4]  142 	ld	a, l
      00001C 12               [ 7]  143 	ld	(de), a
                                    144 ;device.c:39: ++str;
      00001D 13               [ 6]  145 	inc	de
      00001E 18 EB            [12]  146 	jr	00101$
      000020                        147 00103$:
                                    148 ;device.c:42: return ret;
      000020 69               [ 4]  149 	ld	l, c
      000021 60               [ 4]  150 	ld	h, b
                                    151 ;device.c:43: }
      000022 DD E1            [14]  152 	pop	ix
      000024 C9               [10]  153 	ret
      000025                        154 _DevDes:
      000025 12                     155 	.db #0x12	; 18
      000026 01                     156 	.db #0x01	; 1
      000027 10                     157 	.db #0x10	; 16
      000028 01                     158 	.db #0x01	; 1
      000029 02                     159 	.db #0x02	; 2
      00002A 00                     160 	.db #0x00	; 0
      00002B 00                     161 	.db #0x00	; 0
      00002C 08                     162 	.db #0x08	; 8
      00002D 09                     163 	.db #0x09	; 9
      00002E 12                     164 	.db #0x12	; 18
      00002F 34                     165 	.db #0x34	; 52	'4'
      000030 34                     166 	.db #0x34	; 52	'4'
      000031 00                     167 	.db #0x00	; 0
      000032 01                     168 	.db #0x01	; 1
      000033 01                     169 	.db #0x01	; 1
      000034 02                     170 	.db #0x02	; 2
      000035 03                     171 	.db #0x03	; 3
      000036 01                     172 	.db #0x01	; 1
      000037                        173 _ConDes:
      000037 09                     174 	.db #0x09	; 9
      000038 02                     175 	.db #0x02	; 2
      000039 43                     176 	.db #0x43	; 67	'C'
      00003A 00                     177 	.db #0x00	; 0
      00003B 02                     178 	.db #0x02	; 2
      00003C 01                     179 	.db #0x01	; 1
      00003D 00                     180 	.db #0x00	; 0
      00003E C0                     181 	.db #0xc0	; 192
      00003F 19                     182 	.db #0x19	; 25
      000040 09                     183 	.db #0x09	; 9
      000041 04                     184 	.db #0x04	; 4
      000042 00                     185 	.db #0x00	; 0
      000043 00                     186 	.db #0x00	; 0
      000044 01                     187 	.db #0x01	; 1
      000045 02                     188 	.db #0x02	; 2
      000046 02                     189 	.db #0x02	; 2
      000047 01                     190 	.db #0x01	; 1
      000048 00                     191 	.db #0x00	; 0
      000049 05                     192 	.db #0x05	; 5
      00004A 24                     193 	.db #0x24	; 36
      00004B 00                     194 	.db #0x00	; 0
      00004C 10                     195 	.db #0x10	; 16
      00004D 01                     196 	.db #0x01	; 1
      00004E 04                     197 	.db #0x04	; 4
      00004F 24                     198 	.db #0x24	; 36
      000050 02                     199 	.db #0x02	; 2
      000051 02                     200 	.db #0x02	; 2
      000052 05                     201 	.db #0x05	; 5
      000053 24                     202 	.db #0x24	; 36
      000054 06                     203 	.db #0x06	; 6
      000055 00                     204 	.db #0x00	; 0
      000056 01                     205 	.db #0x01	; 1
      000057 05                     206 	.db #0x05	; 5
      000058 24                     207 	.db #0x24	; 36
      000059 01                     208 	.db #0x01	; 1
      00005A 03                     209 	.db #0x03	; 3
      00005B 01                     210 	.db #0x01	; 1
      00005C 07                     211 	.db #0x07	; 7
      00005D 05                     212 	.db #0x05	; 5
      00005E 81                     213 	.db #0x81	; 129
      00005F 03                     214 	.db #0x03	; 3
      000060 08                     215 	.db #0x08	; 8
      000061 00                     216 	.db #0x00	; 0
      000062 14                     217 	.db #0x14	; 20
      000063 09                     218 	.db #0x09	; 9
      000064 04                     219 	.db #0x04	; 4
      000065 01                     220 	.db #0x01	; 1
      000066 00                     221 	.db #0x00	; 0
      000067 02                     222 	.db #0x02	; 2
      000068 0A                     223 	.db #0x0a	; 10
      000069 00                     224 	.db #0x00	; 0
      00006A 00                     225 	.db #0x00	; 0
      00006B 00                     226 	.db #0x00	; 0
      00006C 07                     227 	.db #0x07	; 7
      00006D 05                     228 	.db #0x05	; 5
      00006E 02                     229 	.db #0x02	; 2
      00006F 02                     230 	.db #0x02	; 2
      000070 40                     231 	.db #0x40	; 64
      000071 00                     232 	.db #0x00	; 0
      000072 00                     233 	.db #0x00	; 0
      000073 07                     234 	.db #0x07	; 7
      000074 05                     235 	.db #0x05	; 5
      000075 82                     236 	.db #0x82	; 130
      000076 02                     237 	.db #0x02	; 2
      000077 40                     238 	.db #0x40	; 64
      000078 00                     239 	.db #0x00	; 0
      000079 00                     240 	.db #0x00	; 0
      00007A                        241 _LangDes:
      00007A 04                     242 	.db #0x04	; 4
      00007B 03                     243 	.db #0x03	; 3
      00007C 09                     244 	.db #0x09	; 9
      00007D 04                     245 	.db #0x04	; 4
      00007E                        246 _MANUFACTURER_Des:
      00007E 14                     247 	.db #0x14	; 20
      00007F 03                     248 	.db #0x03	; 3
      000080 53                     249 	.db #0x53	; 83	'S'
      000081 00                     250 	.db #0x00	; 0
      000082 30                     251 	.db #0x30	; 48	'0'
      000083 00                     252 	.db #0x00	; 0
      000084 75                     253 	.db #0x75	; 117	'u'
      000085 00                     254 	.db #0x00	; 0
      000086 72                     255 	.db #0x72	; 114	'r'
      000087 00                     256 	.db #0x00	; 0
      000088 63                     257 	.db #0x63	; 99	'c'
      000089 00                     258 	.db #0x00	; 0
      00008A 65                     259 	.db #0x65	; 101	'e'
      00008B 00                     260 	.db #0x00	; 0
      00008C 72                     261 	.db #0x72	; 114	'r'
      00008D 00                     262 	.db #0x00	; 0
      00008E 6F                     263 	.db #0x6f	; 111	'o'
      00008F 00                     264 	.db #0x00	; 0
      000090 72                     265 	.db #0x72	; 114	'r'
      000091 00                     266 	.db #0x00	; 0
      000092                        267 _PRODUCER_Des:
      000092 1C                     268 	.db #0x1c	; 28
      000093 03                     269 	.db #0x03	; 3
      000094 4D                     270 	.db #0x4d	; 77	'M'
      000095 00                     271 	.db #0x00	; 0
      000096 53                     272 	.db #0x53	; 83	'S'
      000097 00                     273 	.db #0x00	; 0
      000098 58                     274 	.db #0x58	; 88	'X'
      000099 00                     275 	.db #0x00	; 0
      00009A 55                     276 	.db #0x55	; 85	'U'
      00009B 00                     277 	.db #0x00	; 0
      00009C 53                     278 	.db #0x53	; 83	'S'
      00009D 00                     279 	.db #0x00	; 0
      00009E 42                     280 	.db #0x42	; 66	'B'
      00009F 00                     281 	.db #0x00	; 0
      0000A0 2D                     282 	.db #0x2d	; 45
      0000A1 00                     283 	.db #0x00	; 0
      0000A2 53                     284 	.db #0x53	; 83	'S'
      0000A3 00                     285 	.db #0x00	; 0
      0000A4 65                     286 	.db #0x65	; 101	'e'
      0000A5 00                     287 	.db #0x00	; 0
      0000A6 72                     288 	.db #0x72	; 114	'r'
      0000A7 00                     289 	.db #0x00	; 0
      0000A8 69                     290 	.db #0x69	; 105	'i'
      0000A9 00                     291 	.db #0x00	; 0
      0000AA 61                     292 	.db #0x61	; 97	'a'
      0000AB 00                     293 	.db #0x00	; 0
      0000AC 6C                     294 	.db #0x6c	; 108	'l'
      0000AD 00                     295 	.db #0x00	; 0
      0000AE                        296 _PRODUCER_SN_Des:
      0000AE 12                     297 	.db #0x12	; 18
      0000AF 03                     298 	.db #0x03	; 3
      0000B0 32                     299 	.db #0x32	; 50	'2'
      0000B1 00                     300 	.db #0x00	; 0
      0000B2 30                     301 	.db #0x30	; 48	'0'
      0000B3 00                     302 	.db #0x00	; 0
      0000B4 32                     303 	.db #0x32	; 50	'2'
      0000B5 00                     304 	.db #0x00	; 0
      0000B6 31                     305 	.db #0x31	; 49	'1'
      0000B7 00                     306 	.db #0x00	; 0
      0000B8 30                     307 	.db #0x30	; 48	'0'
      0000B9 00                     308 	.db #0x00	; 0
      0000BA 37                     309 	.db #0x37	; 55	'7'
      0000BB 00                     310 	.db #0x00	; 0
      0000BC 30                     311 	.db #0x30	; 48	'0'
      0000BD 00                     312 	.db #0x00	; 0
      0000BE 31                     313 	.db #0x31	; 49	'1'
      0000BF 00                     314 	.db #0x00	; 0
      0000C0                        315 _WELCOME_MSG:
      0000C0 0D                     316 	.db 0x0d
      0000C1 0A                     317 	.db 0x0a
      0000C2 4D 53 58 55 53 42 20   318 	.ascii "MSXUSB Monitor"
             4D 6F 6E 69 74 6F 72
      0000D0 0D                     319 	.db 0x0d
      0000D1 0A                     320 	.db 0x0a
      0000D2 2D 2D 2D 2D 2D 2D 2D   321 	.ascii "--------------"
             2D 2D 2D 2D 2D 2D 2D
      0000E0 0D                     322 	.db 0x0d
      0000E1 0A                     323 	.db 0x0a
      0000E2 4D 78 78 78 78 20 2D   324 	.ascii "Mxxxx - display memory"
             20 64 69 73 70 6C 61
             79 20 6D 65 6D 6F 72
             79
      0000F8 0D                     325 	.db 0x0d
      0000F9 0A                     326 	.db 0x0a
      0000FA 53 78 78 78 78 2C 79   327 	.ascii "Sxxxx,yyyy,filename - save memory"
             79 79 79 2C 66 69 6C
             65 6E 61 6D 65 20 2D
             20 73 61 76 65 20 6D
             65 6D 6F 72 79
      00011B 0D                     328 	.db 0x0d
      00011C 0A                     329 	.db 0x0a
      00011D 4C 78 78 78 78 2C 66   330 	.ascii "Lxxxx,filename - load memory"
             69 6C 65 6E 61 6D 65
             20 2D 20 6C 6F 61 64
             20 6D 65 6D 6F 72 79
      000139 0D                     331 	.db 0x0d
      00013A 0A                     332 	.db 0x0a
      00013B 47 78 78 78 78 20 2D   333 	.ascii "Gxxxx - goto address"
             20 67 6F 74 6F 20 61
             64 64 72 65 73 73
      00014F 0D                     334 	.db 0x0d
      000150 0A                     335 	.db 0x0a
      000151 52 20 2D 20 52 65 73   336 	.ascii "R - Reset"
             65 74
      00015A 0D                     337 	.db 0x0d
      00015B 0A                     338 	.db 0x0a
      00015C 42 20 2D 20 42 41 53   339 	.ascii "B - BASIC"
             49 43
      000165 0D                     340 	.db 0x0d
      000166 0A                     341 	.db 0x0a
      000167 48 20 2D 20 73 68 6F   342 	.ascii "H - show this help text"
             77 20 74 68 69 73 20
             68 65 6C 70 20 74 65
             78 74
      00017E 0D                     343 	.db 0x0d
      00017F 0A                     344 	.db 0x0a
      000180 6F 72 2C 20 70 61 73   345 	.ascii "or, paste Intel HEX lines"
             74 65 20 49 6E 74 65
             6C 20 48 45 58 20 6C
             69 6E 65 73
      000199 0D                     346 	.db 0x0d
      00019A 0A                     347 	.db 0x0a
      00019B 0D                     348 	.db 0x0d
      00019C 0A                     349 	.db 0x0a
      00019D 24 20                  350 	.ascii "$ "
      00019F 00                     351 	.db 0x00
      0001A0                        352 _UNKNOWN_MSG:
      0001A0 0D                     353 	.db 0x0d
      0001A1 0A                     354 	.db 0x0a
      0001A2 49 6E 76 61 6C 69 64   355 	.ascii "Invalid command"
             20 63 6F 6D 6D 61 6E
             64
      0001B1 0D                     356 	.db 0x0d
      0001B2 0A                     357 	.db 0x0a
      0001B3 24 20                  358 	.ascii "$ "
      0001B5 00                     359 	.db 0x00
      0001B6                        360 _BYTES_MSG_ROM:
      0001B6 0D                     361 	.db 0x0d
      0001B7 30 78 30 30 20 62 79   362 	.ascii "0x00 bytes written to memory"
             74 65 73 20 77 72 69
             74 74 65 6E 20 74 6F
             20 6D 65 6D 6F 72 79
      0001D3 0D                     363 	.db 0x0d
      0001D4 0A                     364 	.db 0x0a
      0001D5 24 20                  365 	.ascii "$ "
      0001D7 00                     366 	.db 0x00
      0001D8                        367 _NEWLINE_MSG:
      0001D8 0D                     368 	.db 0x0d
      0001D9 0A                     369 	.db 0x0a
      0001DA 24 20                  370 	.ascii "$ "
      0001DC 00                     371 	.db 0x00
      0001DD                        372 _IHX_TEMPLATE:
      0001DD 0D                     373 	.db 0x0d
      0001DE 0A                     374 	.db 0x0a
      0001DF 3A 31 30 41 30 30 30   375 	.ascii ":10A000002110A0CD07A0C97EA7C8CDA2002318F700"
             30 30 32 31 31 30 41
             30 43 44 30 37 41 30
             43 39 37 45 41 37 43
             38 43 44 41 32 30 30
             32 33 31 38 46 37 30
             30
      00020A 00                     376 	.db 0x00
                                    377 ;device.c:138: void device_reset (WORKAREA* wrk)
                                    378 ;	---------------------------------
                                    379 ; Function device_reset
                                    380 ; ---------------------------------
      00020B                        381 _device_reset::
                                    382 ;device.c:140: wrk->dataTransferLengthEP0 = 0;
      00020B D1               [10]  383 	pop	de
      00020C C1               [10]  384 	pop	bc
      00020D C5               [11]  385 	push	bc
      00020E D5               [11]  386 	push	de
      00020F 21 47 00         [10]  387 	ld	hl, #0x0047
      000212 09               [11]  388 	add	hl, bc
      000213 AF               [ 4]  389 	xor	a, a
      000214 77               [ 7]  390 	ld	(hl), a
      000215 23               [ 6]  391 	inc	hl
      000216 77               [ 7]  392 	ld	(hl), a
                                    393 ;device.c:141: wrk->dataToTransferEP0 = NULL;
      000217 21 43 00         [10]  394 	ld	hl, #0x0043
      00021A 09               [11]  395 	add	hl, bc
      00021B AF               [ 4]  396 	xor	a, a
      00021C 77               [ 7]  397 	ld	(hl), a
      00021D 23               [ 6]  398 	inc	hl
      00021E 77               [ 7]  399 	ld	(hl), a
                                    400 ;device.c:142: wrk->dataTransferLengthEP2 = 0;
      00021F 21 49 00         [10]  401 	ld	hl, #0x0049
      000222 09               [11]  402 	add	hl, bc
      000223 AF               [ 4]  403 	xor	a, a
      000224 77               [ 7]  404 	ld	(hl), a
      000225 23               [ 6]  405 	inc	hl
      000226 77               [ 7]  406 	ld	(hl), a
                                    407 ;device.c:143: wrk->dataToTransferEP2 = NULL;
      000227 21 45 00         [10]  408 	ld	hl, #0x0045
      00022A 09               [11]  409 	add	hl, bc
      00022B AF               [ 4]  410 	xor	a, a
      00022C 77               [ 7]  411 	ld	(hl), a
      00022D 23               [ 6]  412 	inc	hl
      00022E 77               [ 7]  413 	ld	(hl), a
                                    414 ;device.c:144: wrk->usb_device_address = 0;
      00022F 21 4B 00         [10]  415 	ld	hl, #0x004b
      000232 09               [11]  416 	add	hl, bc
      000233 36 00            [10]  417 	ld	(hl), #0x00
                                    418 ;device.c:145: wrk->usb_configuration_id = 0;
      000235 21 4C 00         [10]  419 	ld	hl, #0x004c
      000238 09               [11]  420 	add	hl, bc
      000239 36 00            [10]  421 	ld	(hl), #0x00
                                    422 ;device.c:146: wrk->transaction_state = STATUS;
      00023B 21 4F 00         [10]  423 	ld	hl, #0x004f
      00023E 09               [11]  424 	add	hl, bc
      00023F 36 02            [10]  425 	ld	(hl), #0x02
                                    426 ;device.c:147: wrk->processing_command = CMD_NULL;
      000241 21 50 00         [10]  427 	ld	hl, #0x0050
      000244 09               [11]  428 	add	hl, bc
      000245 36 00            [10]  429 	ld	(hl), #0x00
                                    430 ;device.c:148: wrk->memory_address = 0xffff;
      000247 21 4D 00         [10]  431 	ld	hl, #0x004d
      00024A 09               [11]  432 	add	hl, bc
      00024B 36 FF            [10]  433 	ld	(hl), #0xff
      00024D 23               [ 6]  434 	inc	hl
      00024E 36 FF            [10]  435 	ld	(hl), #0xff
                                    436 ;device.c:152: }
      000250 C9               [10]  437 	ret
                                    438 ;device.c:153: void device_monitor_reset ()
                                    439 ;	---------------------------------
                                    440 ; Function device_monitor_reset
                                    441 ; ---------------------------------
      000251                        442 _device_monitor_reset::
                                    443 ;device.c:155: strcpy (ihx_bytes_processed, BYTES_MSG_ROM);
      000251 11r41r00         [10]  444 	ld	de, #_ihx_bytes_processed
      000254 21rB6r01         [10]  445 	ld	hl, #_BYTES_MSG_ROM
      000257 AF               [ 4]  446 	xor	a, a
      000258                        447 00103$:
      000258 BE               [ 7]  448 	cp	a, (hl)
      000259 ED A0            [16]  449 	ldi
      00025B 20 FB            [12]  450 	jr	NZ, 00103$
                                    451 ;device.c:156: strcpy (ihx_output_line, IHX_TEMPLATE);
      00025D 11r63r00         [10]  452 	ld	de, #_ihx_output_line
      000260 21rDDr01         [10]  453 	ld	hl, #_IHX_TEMPLATE
      000263 AF               [ 4]  454 	xor	a, a
      000264                        455 00104$:
      000264 BE               [ 7]  456 	cp	a, (hl)
      000265 ED A0            [16]  457 	ldi
      000267 20 FB            [12]  458 	jr	NZ, 00104$
                                    459 ;device.c:157: }
      000269 C9               [10]  460 	ret
                                    461 ;device.c:159: void sendEP0ACK ()
                                    462 ;	---------------------------------
                                    463 ; Function sendEP0ACK
                                    464 ; ---------------------------------
      00026A                        465 _sendEP0ACK::
                                    466 ;device.c:161: writeCommand (SET_ENDP3__TX_EP0);
      00026A 2E 19            [ 7]  467 	ld	l, #0x19
      00026C CDr00r00         [17]  468 	call	_writeCommand
                                    469 ;device.c:162: writeData (SET_ENDP_ACK);
      00026F 2E 00            [ 7]  470 	ld	l, #0x00
                                    471 ;device.c:163: }
      000271 C3r00r00         [10]  472 	jp	_writeData
                                    473 ;device.c:164: void sendEP0NAK ()
                                    474 ;	---------------------------------
                                    475 ; Function sendEP0NAK
                                    476 ; ---------------------------------
      000274                        477 _sendEP0NAK::
                                    478 ;device.c:166: writeCommand (SET_ENDP3__TX_EP0);
      000274 2E 19            [ 7]  479 	ld	l, #0x19
      000276 CDr00r00         [17]  480 	call	_writeCommand
                                    481 ;device.c:167: writeData (SET_ENDP_NAK);
      000279 2E 0E            [ 7]  482 	ld	l, #0x0e
                                    483 ;device.c:168: }
      00027B C3r00r00         [10]  484 	jp	_writeData
                                    485 ;device.c:169: void sendEP0STALL ()
                                    486 ;	---------------------------------
                                    487 ; Function sendEP0STALL
                                    488 ; ---------------------------------
      00027E                        489 _sendEP0STALL::
                                    490 ;device.c:171: writeCommand (SET_ENDP3__TX_EP0);
      00027E 2E 19            [ 7]  491 	ld	l, #0x19
      000280 CDr00r00         [17]  492 	call	_writeCommand
                                    493 ;device.c:172: writeData (SET_ENDP_STALL);
      000283 2E 0F            [ 7]  494 	ld	l, #0x0f
                                    495 ;device.c:173: }
      000285 C3r00r00         [10]  496 	jp	_writeData
                                    497 ;device.c:175: void writeDataForEndpoint0(WORKAREA* wrk)
                                    498 ;	---------------------------------
                                    499 ; Function writeDataForEndpoint0
                                    500 ; ---------------------------------
      000288                        501 _writeDataForEndpoint0::
      000288 DD E5            [15]  502 	push	ix
      00028A DD 21 00 00      [14]  503 	ld	ix,#0
      00028E DD 39            [15]  504 	add	ix,sp
      000290 21 FA FF         [10]  505 	ld	hl, #-6
      000293 39               [11]  506 	add	hl, sp
      000294 F9               [ 6]  507 	ld	sp, hl
                                    508 ;device.c:177: int amount = min (EP0_PIPE_SIZE,wrk->dataTransferLengthEP0);
      000295 DD 7E 04         [19]  509 	ld	a, 4 (ix)
      000298 DD 77 FA         [19]  510 	ld	-6 (ix), a
      00029B DD 7E 05         [19]  511 	ld	a, 5 (ix)
      00029E DD 77 FB         [19]  512 	ld	-5 (ix), a
      0002A1 DD 7E FA         [19]  513 	ld	a, -6 (ix)
      0002A4 C6 47            [ 7]  514 	add	a, #0x47
      0002A6 DD 77 FC         [19]  515 	ld	-4 (ix), a
      0002A9 DD 7E FB         [19]  516 	ld	a, -5 (ix)
      0002AC CE 00            [ 7]  517 	adc	a, #0x00
      0002AE DD 77 FD         [19]  518 	ld	-3 (ix), a
      0002B1 DD 6E FC         [19]  519 	ld	l, -4 (ix)
      0002B4 DD 66 FD         [19]  520 	ld	h, -3 (ix)
      0002B7 4E               [ 7]  521 	ld	c, (hl)
      0002B8 23               [ 6]  522 	inc	hl
      0002B9 46               [ 7]  523 	ld	b, (hl)
      0002BA 3E 08            [ 7]  524 	ld	a, #0x08
      0002BC B9               [ 4]  525 	cp	a, c
      0002BD 3E 00            [ 7]  526 	ld	a, #0x00
      0002BF 98               [ 4]  527 	sbc	a, b
      0002C0 30 03            [12]  528 	jr	NC, 00107$
      0002C2 01 08 00         [10]  529 	ld	bc, #0x0008
      0002C5                        530 00107$:
      0002C5 DD 71 FE         [19]  531 	ld	-2 (ix), c
      0002C8 DD 70 FF         [19]  532 	ld	-1 (ix), b
                                    533 ;device.c:183: writeCommand(CH_CMD_WR_EP0);
      0002CB 2E 29            [ 7]  534 	ld	l, #0x29
      0002CD CDr00r00         [17]  535 	call	_writeCommand
                                    536 ;device.c:184: writeData(amount);
      0002D0 DD 6E FE         [19]  537 	ld	l, -2 (ix)
      0002D3 CDr00r00         [17]  538 	call	_writeData
                                    539 ;device.c:185: for(int i=0; i<amount; i++) 
      0002D6 DD 7E FA         [19]  540 	ld	a, -6 (ix)
      0002D9 C6 43            [ 7]  541 	add	a, #0x43
      0002DB 4F               [ 4]  542 	ld	c, a
      0002DC DD 7E FB         [19]  543 	ld	a, -5 (ix)
      0002DF CE 00            [ 7]  544 	adc	a, #0x00
      0002E1 47               [ 4]  545 	ld	b, a
      0002E2 11 00 00         [10]  546 	ld	de, #0x0000
      0002E5                        547 00103$:
                                    548 ;device.c:190: writeData(wrk->dataToTransferEP0[i]);
      0002E5 69               [ 4]  549 	ld	l, c
      0002E6 60               [ 4]  550 	ld	h, b
      0002E7 7E               [ 7]  551 	ld	a, (hl)
      0002E8 23               [ 6]  552 	inc	hl
      0002E9 66               [ 7]  553 	ld	h, (hl)
      0002EA 6F               [ 4]  554 	ld	l, a
                                    555 ;device.c:185: for(int i=0; i<amount; i++) 
      0002EB 7B               [ 4]  556 	ld	a, e
      0002EC DD 96 FE         [19]  557 	sub	a, -2 (ix)
      0002EF 7A               [ 4]  558 	ld	a, d
      0002F0 DD 9E FF         [19]  559 	sbc	a, -1 (ix)
      0002F3 E2rF8r02         [10]  560 	jp	PO, 00125$
      0002F6 EE 80            [ 7]  561 	xor	a, #0x80
      0002F8                        562 00125$:
      0002F8 F2r07r03         [10]  563 	jp	P, 00101$
                                    564 ;device.c:190: writeData(wrk->dataToTransferEP0[i]);
      0002FB 19               [11]  565 	add	hl, de
      0002FC 6E               [ 7]  566 	ld	l, (hl)
      0002FD C5               [11]  567 	push	bc
      0002FE D5               [11]  568 	push	de
      0002FF CDr00r00         [17]  569 	call	_writeData
      000302 D1               [10]  570 	pop	de
      000303 C1               [10]  571 	pop	bc
                                    572 ;device.c:185: for(int i=0; i<amount; i++) 
      000304 13               [ 6]  573 	inc	de
      000305 18 DE            [12]  574 	jr	00103$
      000307                        575 00101$:
                                    576 ;device.c:195: wrk->dataToTransferEP0 += amount;
      000307 7D               [ 4]  577 	ld	a, l
      000308 DD 86 FE         [19]  578 	add	a, -2 (ix)
      00030B 5F               [ 4]  579 	ld	e, a
      00030C 7C               [ 4]  580 	ld	a, h
      00030D DD 8E FF         [19]  581 	adc	a, -1 (ix)
      000310 57               [ 4]  582 	ld	d, a
      000311 7B               [ 4]  583 	ld	a, e
      000312 02               [ 7]  584 	ld	(bc), a
      000313 03               [ 6]  585 	inc	bc
      000314 7A               [ 4]  586 	ld	a, d
      000315 02               [ 7]  587 	ld	(bc), a
                                    588 ;device.c:196: wrk->dataTransferLengthEP0 -= amount;
      000316 DD 6E FC         [19]  589 	ld	l, -4 (ix)
      000319 DD 66 FD         [19]  590 	ld	h, -3 (ix)
      00031C 4E               [ 7]  591 	ld	c, (hl)
      00031D 23               [ 6]  592 	inc	hl
      00031E 66               [ 7]  593 	ld	h, (hl)
      00031F 69               [ 4]  594 	ld	l, c
      000320 DD 4E FE         [19]  595 	ld	c, -2 (ix)
      000323 DD 46 FF         [19]  596 	ld	b, -1 (ix)
      000326 BF               [ 4]  597 	cp	a, a
      000327 ED 42            [15]  598 	sbc	hl, bc
      000329 EB               [ 4]  599 	ex	de, hl
      00032A C1               [10]  600 	pop	bc
      00032B E1               [10]  601 	pop	hl
      00032C E5               [11]  602 	push	hl
      00032D C5               [11]  603 	push	bc
      00032E 73               [ 7]  604 	ld	(hl), e
      00032F 23               [ 6]  605 	inc	hl
      000330 72               [ 7]  606 	ld	(hl), d
                                    607 ;device.c:197: }
      000331 DD F9            [10]  608 	ld	sp, ix
      000333 DD E1            [14]  609 	pop	ix
      000335 C9               [10]  610 	ret
                                    611 ;device.c:198: void writeDataForEndpoint2(WORKAREA* wrk)
                                    612 ;	---------------------------------
                                    613 ; Function writeDataForEndpoint2
                                    614 ; ---------------------------------
      000336                        615 _writeDataForEndpoint2::
      000336 DD E5            [15]  616 	push	ix
      000338 DD 21 00 00      [14]  617 	ld	ix,#0
      00033C DD 39            [15]  618 	add	ix,sp
      00033E 21 FA FF         [10]  619 	ld	hl, #-6
      000341 39               [11]  620 	add	hl, sp
      000342 F9               [ 6]  621 	ld	sp, hl
                                    622 ;device.c:200: int amount = min (BULK_OUT_ENDP_MAX_SIZE,wrk->dataTransferLengthEP2);
      000343 DD 7E 04         [19]  623 	ld	a, 4 (ix)
      000346 DD 77 FA         [19]  624 	ld	-6 (ix), a
      000349 DD 7E 05         [19]  625 	ld	a, 5 (ix)
      00034C DD 77 FB         [19]  626 	ld	-5 (ix), a
      00034F DD 7E FA         [19]  627 	ld	a, -6 (ix)
      000352 C6 49            [ 7]  628 	add	a, #0x49
      000354 DD 77 FC         [19]  629 	ld	-4 (ix), a
      000357 DD 7E FB         [19]  630 	ld	a, -5 (ix)
      00035A CE 00            [ 7]  631 	adc	a, #0x00
      00035C DD 77 FD         [19]  632 	ld	-3 (ix), a
      00035F DD 6E FC         [19]  633 	ld	l, -4 (ix)
      000362 DD 66 FD         [19]  634 	ld	h, -3 (ix)
      000365 4E               [ 7]  635 	ld	c, (hl)
      000366 23               [ 6]  636 	inc	hl
      000367 46               [ 7]  637 	ld	b, (hl)
      000368 3E 40            [ 7]  638 	ld	a, #0x40
      00036A B9               [ 4]  639 	cp	a, c
      00036B 3E 00            [ 7]  640 	ld	a, #0x00
      00036D 98               [ 4]  641 	sbc	a, b
      00036E 30 03            [12]  642 	jr	NC, 00109$
      000370 01 40 00         [10]  643 	ld	bc, #0x0040
      000373                        644 00109$:
                                    645 ;device.c:202: if (amount!=0)
      000373 78               [ 4]  646 	ld	a, b
      000374 B1               [ 4]  647 	or	a, c
      000375 28 62            [12]  648 	jr	Z, 00107$
                                    649 ;device.c:207: writeCommand(CH_CMD_WR_EP2);
      000377 C5               [11]  650 	push	bc
      000378 2E 2B            [ 7]  651 	ld	l, #0x2b
      00037A CDr00r00         [17]  652 	call	_writeCommand
      00037D C1               [10]  653 	pop	bc
                                    654 ;device.c:208: writeData(amount);
      00037E 69               [ 4]  655 	ld	l, c
      00037F C5               [11]  656 	push	bc
      000380 CDr00r00         [17]  657 	call	_writeData
      000383 C1               [10]  658 	pop	bc
                                    659 ;device.c:209: for(int i=0; i<amount; i++) 
      000384 DD 7E FA         [19]  660 	ld	a, -6 (ix)
      000387 C6 45            [ 7]  661 	add	a, #0x45
      000389 DD 77 FE         [19]  662 	ld	-2 (ix), a
      00038C DD 7E FB         [19]  663 	ld	a, -5 (ix)
      00038F CE 00            [ 7]  664 	adc	a, #0x00
      000391 DD 77 FF         [19]  665 	ld	-1 (ix), a
      000394 11 00 00         [10]  666 	ld	de, #0x0000
      000397                        667 00105$:
                                    668 ;device.c:214: writeData(wrk->dataToTransferEP2[i]);
      000397 DD 6E FE         [19]  669 	ld	l, -2 (ix)
      00039A DD 66 FF         [19]  670 	ld	h, -1 (ix)
      00039D 7E               [ 7]  671 	ld	a, (hl)
      00039E 23               [ 6]  672 	inc	hl
      00039F 66               [ 7]  673 	ld	h, (hl)
      0003A0 6F               [ 4]  674 	ld	l, a
                                    675 ;device.c:209: for(int i=0; i<amount; i++) 
      0003A1 7B               [ 4]  676 	ld	a, e
      0003A2 91               [ 4]  677 	sub	a, c
      0003A3 7A               [ 4]  678 	ld	a, d
      0003A4 98               [ 4]  679 	sbc	a, b
      0003A5 E2rAAr03         [10]  680 	jp	PO, 00132$
      0003A8 EE 80            [ 7]  681 	xor	a, #0x80
      0003AA                        682 00132$:
      0003AA F2rB9r03         [10]  683 	jp	P, 00101$
                                    684 ;device.c:214: writeData(wrk->dataToTransferEP2[i]);
      0003AD 19               [11]  685 	add	hl, de
      0003AE 6E               [ 7]  686 	ld	l, (hl)
      0003AF C5               [11]  687 	push	bc
      0003B0 D5               [11]  688 	push	de
      0003B1 CDr00r00         [17]  689 	call	_writeData
      0003B4 D1               [10]  690 	pop	de
      0003B5 C1               [10]  691 	pop	bc
                                    692 ;device.c:209: for(int i=0; i<amount; i++) 
      0003B6 13               [ 6]  693 	inc	de
      0003B7 18 DE            [12]  694 	jr	00105$
      0003B9                        695 00101$:
                                    696 ;device.c:219: wrk->dataToTransferEP2 += amount;
      0003B9 09               [11]  697 	add	hl, bc
      0003BA EB               [ 4]  698 	ex	de, hl
      0003BB DD 6E FE         [19]  699 	ld	l, -2 (ix)
      0003BE DD 66 FF         [19]  700 	ld	h, -1 (ix)
      0003C1 73               [ 7]  701 	ld	(hl), e
      0003C2 23               [ 6]  702 	inc	hl
      0003C3 72               [ 7]  703 	ld	(hl), d
                                    704 ;device.c:220: wrk->dataTransferLengthEP2 -= amount;
      0003C4 DD 6E FC         [19]  705 	ld	l, -4 (ix)
      0003C7 DD 66 FD         [19]  706 	ld	h, -3 (ix)
      0003CA 5E               [ 7]  707 	ld	e, (hl)
      0003CB 23               [ 6]  708 	inc	hl
      0003CC 66               [ 7]  709 	ld	h, (hl)
      0003CD 6B               [ 4]  710 	ld	l, e
      0003CE BF               [ 4]  711 	cp	a, a
      0003CF ED 42            [15]  712 	sbc	hl, bc
      0003D1 EB               [ 4]  713 	ex	de, hl
      0003D2 C1               [10]  714 	pop	bc
      0003D3 E1               [10]  715 	pop	hl
      0003D4 E5               [11]  716 	push	hl
      0003D5 C5               [11]  717 	push	bc
      0003D6 73               [ 7]  718 	ld	(hl), e
      0003D7 23               [ 6]  719 	inc	hl
      0003D8 72               [ 7]  720 	ld	(hl), d
      0003D9                        721 00107$:
                                    722 ;device.c:222: }
      0003D9 DD F9            [10]  723 	ld	sp, ix
      0003DB DD E1            [14]  724 	pop	ix
      0003DD C9               [10]  725 	ret
                                    726 ;device.c:224: size_t read_usb_data (uint8_t* pBuffer)
                                    727 ;	---------------------------------
                                    728 ; Function read_usb_data
                                    729 ; ---------------------------------
      0003DE                        730 _read_usb_data::
                                    731 ;device.c:227: writeCommand(CH375_CMD_RD_USB_DATA_UNLOCK);
      0003DE 2E 28            [ 7]  732 	ld	l, #0x28
      0003E0 CDr00r00         [17]  733 	call	_writeCommand
                                    734 ;device.c:228: value = readData();
      0003E3 CDr00r00         [17]  735 	call	_readData
      0003E6 5D               [ 4]  736 	ld	e, l
                                    737 ;device.c:229: if (value==0)
      0003E7 7B               [ 4]  738 	ld	a, e
      0003E8 B7               [ 4]  739 	or	a, a
      0003E9 20 04            [12]  740 	jr	NZ, 00111$
                                    741 ;device.c:230: return 0;
      0003EB 21 00 00         [10]  742 	ld	hl, #0x0000
      0003EE C9               [10]  743 	ret
                                    744 ;device.c:231: for (uint8_t i=0;i<value;i++)
      0003EF                        745 00111$:
      0003EF 16 00            [ 7]  746 	ld	d, #0x00
      0003F1                        747 00105$:
      0003F1 7A               [ 4]  748 	ld	a, d
      0003F2 93               [ 4]  749 	sub	a, e
      0003F3 30 1D            [12]  750 	jr	NC, 00103$
                                    751 ;device.c:232: *(pBuffer+i) = readData();
      0003F5 FD 21 02 00      [14]  752 	ld	iy, #2
      0003F9 FD 39            [15]  753 	add	iy, sp
      0003FB FD 7E 00         [19]  754 	ld	a, 0 (iy)
      0003FE 82               [ 4]  755 	add	a, d
      0003FF 4F               [ 4]  756 	ld	c, a
      000400 FD 7E 01         [19]  757 	ld	a, 1 (iy)
      000403 CE 00            [ 7]  758 	adc	a, #0x00
      000405 47               [ 4]  759 	ld	b, a
      000406 C5               [11]  760 	push	bc
      000407 D5               [11]  761 	push	de
      000408 CDr00r00         [17]  762 	call	_readData
      00040B 7D               [ 4]  763 	ld	a, l
      00040C D1               [10]  764 	pop	de
      00040D C1               [10]  765 	pop	bc
      00040E 02               [ 7]  766 	ld	(bc), a
                                    767 ;device.c:231: for (uint8_t i=0;i<value;i++)
      00040F 14               [ 4]  768 	inc	d
      000410 18 DF            [12]  769 	jr	00105$
      000412                        770 00103$:
                                    771 ;device.c:233: return value;
      000412 16 00            [ 7]  772 	ld	d, #0x00
      000414 EB               [ 4]  773 	ex	de, hl
                                    774 ;device.c:234: }
      000415 C9               [10]  775 	ret
                                    776 ;device.c:236: void set_target_device_address (uint8_t address)
                                    777 ;	---------------------------------
                                    778 ; Function set_target_device_address
                                    779 ; ---------------------------------
      000416                        780 _set_target_device_address::
                                    781 ;device.c:238: writeCommand (CH375_CMD_SET_USB_ADDR);
      000416 2E 13            [ 7]  782 	ld	l, #0x13
      000418 CDr00r00         [17]  783 	call	_writeCommand
                                    784 ;device.c:239: writeData(address);
      00041B FD 21 02 00      [14]  785 	ld	iy, #2
      00041F FD 39            [15]  786 	add	iy, sp
      000421 FD 6E 00         [19]  787 	ld	l, 0 (iy)
                                    788 ;device.c:241: }
      000424 C3r00r00         [10]  789 	jp	_writeData
                                    790 ;device.c:243: uint16_t convertHex (char* start, uint8_t len)
                                    791 ;	---------------------------------
                                    792 ; Function convertHex
                                    793 ; ---------------------------------
      000427                        794 _convertHex::
      000427 DD E5            [15]  795 	push	ix
      000429 DD 21 00 00      [14]  796 	ld	ix,#0
      00042D DD 39            [15]  797 	add	ix,sp
      00042F 21 F7 FF         [10]  798 	ld	hl, #-9
      000432 39               [11]  799 	add	hl, sp
      000433 F9               [ 6]  800 	ld	sp, hl
                                    801 ;device.c:245: uint16_t result=0;
      000434 AF               [ 4]  802 	xor	a, a
      000435 DD 77 FB         [19]  803 	ld	-5 (ix), a
      000438 DD 77 FC         [19]  804 	ld	-4 (ix), a
                                    805 ;device.c:247: cur = start;
      00043B DD 7E 04         [19]  806 	ld	a, 4 (ix)
      00043E DD 77 FD         [19]  807 	ld	-3 (ix), a
      000441 DD 7E 05         [19]  808 	ld	a, 5 (ix)
      000444 DD 77 FE         [19]  809 	ld	-2 (ix), a
                                    810 ;device.c:248: while (len-- && *cur!='\0')
      000447 DD 7E 06         [19]  811 	ld	a, 6 (ix)
      00044A DD 77 FF         [19]  812 	ld	-1 (ix), a
      00044D                        813 00104$:
      00044D DD 7E FF         [19]  814 	ld	a, -1 (ix)
      000450 DD 77 FA         [19]  815 	ld	-6 (ix), a
      000453 DD 35 FF         [23]  816 	dec	-1 (ix)
      000456 DD 7E FA         [19]  817 	ld	a, -6 (ix)
      000459 B7               [ 4]  818 	or	a, a
      00045A 28 71            [12]  819 	jr	Z, 00106$
      00045C DD 6E FD         [19]  820 	ld	l, -3 (ix)
      00045F DD 66 FE         [19]  821 	ld	h, -2 (ix)
      000462 7E               [ 7]  822 	ld	a, (hl)
      000463 B7               [ 4]  823 	or	a, a
      000464 28 67            [12]  824 	jr	Z, 00106$
                                    825 ;device.c:250: *cur = *cur;
      000466 DD 6E FD         [19]  826 	ld	l, -3 (ix)
      000469 DD 66 FE         [19]  827 	ld	h, -2 (ix)
      00046C 77               [ 7]  828 	ld	(hl), a
                                    829 ;device.c:251: uint8_t dec = *cur - '0';
      00046D C6 D0            [ 7]  830 	add	a, #0xd0
      00046F 4F               [ 4]  831 	ld	c, a
                                    832 ;device.c:252: if (dec>9)
      000470 3E 09            [ 7]  833 	ld	a, #0x09
      000472 91               [ 4]  834 	sub	a, c
      000473 30 04            [12]  835 	jr	NC, 00102$
                                    836 ;device.c:253: dec -= 7;
      000475 79               [ 4]  837 	ld	a, c
      000476 C6 F9            [ 7]  838 	add	a, #0xf9
      000478 4F               [ 4]  839 	ld	c, a
      000479                        840 00102$:
                                    841 ;device.c:254: result = (result << 4) + dec;
      000479 DD 7E FB         [19]  842 	ld	a, -5 (ix)
      00047C DD 77 F9         [19]  843 	ld	-7 (ix), a
      00047F DD 7E FC         [19]  844 	ld	a, -4 (ix)
      000482 DD 77 FA         [19]  845 	ld	-6 (ix), a
      000485 06 04            [ 7]  846 	ld	b, #0x04
      000487                        847 00130$:
      000487 DD CB F9 26      [23]  848 	sla	-7 (ix)
      00048B DD CB FA 16      [23]  849 	rl	-6 (ix)
      00048F 10 F6            [13]  850 	djnz	00130$
      000491 DD 71 FB         [19]  851 	ld	-5 (ix), c
      000494 DD 36 FC 00      [19]  852 	ld	-4 (ix), #0
      000498 DD 7E F9         [19]  853 	ld	a, -7 (ix)
      00049B DD 77 F7         [19]  854 	ld	-9 (ix), a
      00049E DD 7E FA         [19]  855 	ld	a, -6 (ix)
      0004A1 DD 77 F8         [19]  856 	ld	-8 (ix), a
      0004A4 DD 7E FB         [19]  857 	ld	a, -5 (ix)
      0004A7 DD 77 F9         [19]  858 	ld	-7 (ix), a
      0004AA DD 7E FC         [19]  859 	ld	a, -4 (ix)
      0004AD DD 77 FA         [19]  860 	ld	-6 (ix), a
      0004B0 DD 7E F9         [19]  861 	ld	a, -7 (ix)
      0004B3 DD 86 F7         [19]  862 	add	a, -9 (ix)
      0004B6 DD 77 FB         [19]  863 	ld	-5 (ix), a
      0004B9 DD 7E FA         [19]  864 	ld	a, -6 (ix)
      0004BC DD 8E F8         [19]  865 	adc	a, -8 (ix)
      0004BF DD 77 FC         [19]  866 	ld	-4 (ix), a
                                    867 ;device.c:255: cur++;
      0004C2 DD 34 FD         [23]  868 	inc	-3 (ix)
      0004C5 20 86            [12]  869 	jr	NZ, 00104$
      0004C7 DD 34 FE         [23]  870 	inc	-2 (ix)
      0004CA C3r4Dr04         [10]  871 	jp	00104$
      0004CD                        872 00106$:
                                    873 ;device.c:257: return result;
      0004CD DD 6E FB         [19]  874 	ld	l, -5 (ix)
      0004D0 DD 66 FC         [19]  875 	ld	h, -4 (ix)
                                    876 ;device.c:258: }
      0004D3 DD F9            [10]  877 	ld	sp, ix
      0004D5 DD E1            [14]  878 	pop	ix
      0004D7 C9               [10]  879 	ret
                                    880 ;device.c:259: void convertToStr (uint8_t value, char* buffer)
                                    881 ;	---------------------------------
                                    882 ; Function convertToStr
                                    883 ; ---------------------------------
      0004D8                        884 _convertToStr::
                                    885 ;device.c:261: uint8_t lo_nibble = value & 0x0f;
      0004D8 FD 21 02 00      [14]  886 	ld	iy, #2
      0004DC FD 39            [15]  887 	add	iy, sp
      0004DE FD 7E 00         [19]  888 	ld	a, 0 (iy)
      0004E1 F5               [11]  889 	push	af
      0004E2 E6 0F            [ 7]  890 	and	a, #0x0f
      0004E4 4F               [ 4]  891 	ld	c, a
      0004E5 F1               [10]  892 	pop	af
                                    893 ;device.c:262: uint8_t hi_nibble = value >> 4;
      0004E6 07               [ 4]  894 	rlca
      0004E7 07               [ 4]  895 	rlca
      0004E8 07               [ 4]  896 	rlca
      0004E9 07               [ 4]  897 	rlca
      0004EA E6 0F            [ 7]  898 	and	a, #0x0f
      0004EC 6F               [ 4]  899 	ld	l, a
                                    900 ;device.c:264: *buffer = hi_nibble>9?hi_nibble+'A'-10:hi_nibble+'0';
      0004ED FD 5E 01         [19]  901 	ld	e, 1 (iy)
      0004F0 FD 56 02         [19]  902 	ld	d, 2 (iy)
      0004F3 45               [ 4]  903 	ld	b, l
      0004F4 3E 09            [ 7]  904 	ld	a, #0x09
      0004F6 95               [ 4]  905 	sub	a, l
      0004F7 30 05            [12]  906 	jr	NC, 00103$
      0004F9 78               [ 4]  907 	ld	a, b
      0004FA C6 37            [ 7]  908 	add	a, #0x37
      0004FC 18 03            [12]  909 	jr	00104$
      0004FE                        910 00103$:
      0004FE 78               [ 4]  911 	ld	a, b
      0004FF C6 30            [ 7]  912 	add	a, #0x30
      000501                        913 00104$:
      000501 12               [ 7]  914 	ld	(de), a
                                    915 ;device.c:265: *(buffer+1) = lo_nibble>9?lo_nibble+'A'-10:lo_nibble+'0';
      000502 13               [ 6]  916 	inc	de
      000503 41               [ 4]  917 	ld	b, c
      000504 3E 09            [ 7]  918 	ld	a, #0x09
      000506 91               [ 4]  919 	sub	a, c
      000507 30 05            [12]  920 	jr	NC, 00105$
      000509 78               [ 4]  921 	ld	a, b
      00050A C6 37            [ 7]  922 	add	a, #0x37
      00050C 18 03            [12]  923 	jr	00106$
      00050E                        924 00105$:
      00050E 78               [ 4]  925 	ld	a, b
      00050F C6 30            [ 7]  926 	add	a, #0x30
      000511                        927 00106$:
      000511 12               [ 7]  928 	ld	(de), a
                                    929 ;device.c:266: }
      000512 C9               [10]  930 	ret
                                    931 ;device.c:268: uint8_t handleIHX(char* ihxline)
                                    932 ;	---------------------------------
                                    933 ; Function handleIHX
                                    934 ; ---------------------------------
      000513                        935 _handleIHX::
      000513 DD E5            [15]  936 	push	ix
      000515 DD 21 00 00      [14]  937 	ld	ix,#0
      000519 DD 39            [15]  938 	add	ix,sp
      00051B F5               [11]  939 	push	af
      00051C 3B               [ 6]  940 	dec	sp
                                    941 ;device.c:273: uint8_t type = convertHex (ihxline+6,2);
      00051D DD 6E 04         [19]  942 	ld	l, 4 (ix)
      000520 DD 66 05         [19]  943 	ld	h, 5 (ix)
      000523 11 06 00         [10]  944 	ld	de, #0x0006
      000526 19               [11]  945 	add	hl, de
      000527 3E 02            [ 7]  946 	ld	a, #0x02
      000529 F5               [11]  947 	push	af
      00052A 33               [ 6]  948 	inc	sp
      00052B E5               [11]  949 	push	hl
      00052C CDr27r04         [17]  950 	call	_convertHex
      00052F F1               [10]  951 	pop	af
      000530 33               [ 6]  952 	inc	sp
      000531 EB               [ 4]  953 	ex	de, hl
                                    954 ;device.c:274: if (type!=00)
      000532 7B               [ 4]  955 	ld	a, e
      000533 B7               [ 4]  956 	or	a, a
      000534 28 05            [12]  957 	jr	Z, 00102$
                                    958 ;device.c:275: return 0;
      000536 2E 00            [ 7]  959 	ld	l, #0x00
      000538 C3rBDr05         [10]  960 	jp	00106$
      00053B                        961 00102$:
                                    962 ;device.c:279: uint8_t byteCount = convertHex (ihxline,2);
      00053B 3E 02            [ 7]  963 	ld	a, #0x02
      00053D F5               [11]  964 	push	af
      00053E 33               [ 6]  965 	inc	sp
      00053F DD 6E 04         [19]  966 	ld	l, 4 (ix)
      000542 DD 66 05         [19]  967 	ld	h, 5 (ix)
      000545 E5               [11]  968 	push	hl
      000546 CDr27r04         [17]  969 	call	_convertHex
      000549 F1               [10]  970 	pop	af
      00054A 33               [ 6]  971 	inc	sp
                                    972 ;device.c:280: uint16_t addressStart = convertHex (ihxline+2,4);
      00054B DD 4E 04         [19]  973 	ld	c, 4 (ix)
      00054E DD 46 05         [19]  974 	ld	b, 5 (ix)
      000551 03               [ 6]  975 	inc	bc
      000552 03               [ 6]  976 	inc	bc
      000553 E5               [11]  977 	push	hl
      000554 3E 04            [ 7]  978 	ld	a, #0x04
      000556 F5               [11]  979 	push	af
      000557 33               [ 6]  980 	inc	sp
      000558 C5               [11]  981 	push	bc
      000559 CDr27r04         [17]  982 	call	_convertHex
      00055C F1               [10]  983 	pop	af
      00055D 33               [ 6]  984 	inc	sp
      00055E EB               [ 4]  985 	ex	de, hl
      00055F E1               [10]  986 	pop	hl
                                    987 ;device.c:286: ihxline += 8;
      000560 DD 7E 04         [19]  988 	ld	a, 4 (ix)
      000563 C6 08            [ 7]  989 	add	a, #0x08
      000565 DD 77 04         [19]  990 	ld	4 (ix), a
      000568 30 03            [12]  991 	jr	NC, 00124$
      00056A DD 34 05         [23]  992 	inc	5 (ix)
      00056D                        993 00124$:
                                    994 ;device.c:287: while (byteCount--)
      00056D 0E 00            [ 7]  995 	ld	c, #0x00
      00056F DD 7E 04         [19]  996 	ld	a, 4 (ix)
      000572 DD 77 FD         [19]  997 	ld	-3 (ix), a
      000575 DD 7E 05         [19]  998 	ld	a, 5 (ix)
      000578 DD 77 FE         [19]  999 	ld	-2 (ix), a
      00057B DD 75 FF         [19] 1000 	ld	-1 (ix), l
      00057E                       1001 00103$:
      00057E DD 46 FF         [19] 1002 	ld	b, -1 (ix)
      000581 DD 35 FF         [23] 1003 	dec	-1 (ix)
      000584 78               [ 4] 1004 	ld	a, b
      000585 B7               [ 4] 1005 	or	a, a
      000586 28 34            [12] 1006 	jr	Z, 00105$
                                   1007 ;device.c:289: value = convertHex (ihxline,2);
      000588 C5               [11] 1008 	push	bc
      000589 D5               [11] 1009 	push	de
      00058A 3E 02            [ 7] 1010 	ld	a, #0x02
      00058C F5               [11] 1011 	push	af
      00058D 33               [ 6] 1012 	inc	sp
      00058E DD 6E FD         [19] 1013 	ld	l, -3 (ix)
      000591 DD 66 FE         [19] 1014 	ld	h, -2 (ix)
      000594 E5               [11] 1015 	push	hl
      000595 CDr27r04         [17] 1016 	call	_convertHex
      000598 F1               [10] 1017 	pop	af
      000599 33               [ 6] 1018 	inc	sp
      00059A D1               [10] 1019 	pop	de
      00059B C1               [10] 1020 	pop	bc
      00059C 45               [ 4] 1021 	ld	b, l
                                   1022 ;device.c:290: host_writeByte (addressStart++,value);
      00059D 6B               [ 4] 1023 	ld	l, e
      00059E 62               [ 4] 1024 	ld	h, d
      00059F 13               [ 6] 1025 	inc	de
      0005A0 C5               [11] 1026 	push	bc
      0005A1 D5               [11] 1027 	push	de
      0005A2 C5               [11] 1028 	push	bc
      0005A3 33               [ 6] 1029 	inc	sp
      0005A4 E5               [11] 1030 	push	hl
      0005A5 CDr00r00         [17] 1031 	call	_host_writeByte
      0005A8 F1               [10] 1032 	pop	af
      0005A9 33               [ 6] 1033 	inc	sp
      0005AA D1               [10] 1034 	pop	de
      0005AB C1               [10] 1035 	pop	bc
                                   1036 ;device.c:291: bytesWritten++;
      0005AC 0C               [ 4] 1037 	inc	c
                                   1038 ;device.c:292: ihxline+=2;
      0005AD DD 7E FD         [19] 1039 	ld	a, -3 (ix)
      0005B0 C6 02            [ 7] 1040 	add	a, #0x02
      0005B2 DD 77 FD         [19] 1041 	ld	-3 (ix), a
      0005B5 30 C7            [12] 1042 	jr	NC, 00103$
      0005B7 DD 34 FE         [23] 1043 	inc	-2 (ix)
      0005BA 18 C2            [12] 1044 	jr	00103$
      0005BC                       1045 00105$:
                                   1046 ;device.c:303: return bytesWritten;
      0005BC 69               [ 4] 1047 	ld	l, c
      0005BD                       1048 00106$:
                                   1049 ;device.c:304: }
      0005BD DD F9            [10] 1050 	ld	sp, ix
      0005BF DD E1            [14] 1051 	pop	ix
      0005C1 C9               [10] 1052 	ret
                                   1053 ;device.c:306: void print_memory (WORKAREA* wrk)
                                   1054 ;	---------------------------------
                                   1055 ; Function print_memory
                                   1056 ; ---------------------------------
      0005C2                       1057 _print_memory::
      0005C2 DD E5            [15] 1058 	push	ix
      0005C4 DD 21 00 00      [14] 1059 	ld	ix,#0
      0005C8 DD 39            [15] 1060 	add	ix,sp
      0005CA 21 FA FF         [10] 1061 	ld	hl, #-6
      0005CD 39               [11] 1062 	add	hl, sp
      0005CE F9               [ 6] 1063 	ld	sp, hl
                                   1064 ;device.c:315: wrk->dataToTransferEP2 = (uint8_t*) ihx_output_line;
      0005CF DD 4E 04         [19] 1065 	ld	c, 4 (ix)
      0005D2 DD 46 05         [19] 1066 	ld	b, 5 (ix)
      0005D5 21 45 00         [10] 1067 	ld	hl, #0x0045
      0005D8 09               [11] 1068 	add	hl, bc
      0005D9 EB               [ 4] 1069 	ex	de, hl
      0005DA 3Er63            [ 7] 1070 	ld	a, #<(_ihx_output_line)
      0005DC 12               [ 7] 1071 	ld	(de), a
      0005DD 13               [ 6] 1072 	inc	de
      0005DE 3Es00            [ 7] 1073 	ld	a, #>(_ihx_output_line)
      0005E0 12               [ 7] 1074 	ld	(de), a
                                   1075 ;device.c:316: wrk->dataTransferLengthEP2 = sizeof (ihx_output_line);
      0005E1 21 49 00         [10] 1076 	ld	hl, #0x0049
      0005E4 09               [11] 1077 	add	hl, bc
      0005E5 36 2E            [10] 1078 	ld	(hl), #0x2e
      0005E7 23               [ 6] 1079 	inc	hl
      0005E8 36 00            [10] 1080 	ld	(hl), #0x00
                                   1081 ;device.c:319: uint16_t address = wrk->memory_address;
      0005EA 21 4D 00         [10] 1082 	ld	hl, #0x004d
      0005ED 09               [11] 1083 	add	hl, bc
      0005EE EB               [ 4] 1084 	ex	de, hl
      0005EF 1A               [ 7] 1085 	ld	a, (de)
      0005F0 DD 77 FA         [19] 1086 	ld	-6 (ix), a
      0005F3 13               [ 6] 1087 	inc	de
      0005F4 1A               [ 7] 1088 	ld	a, (de)
      0005F5 DD 77 FB         [19] 1089 	ld	-5 (ix), a
      0005F8 1B               [ 6] 1090 	dec	de
                                   1091 ;device.c:320: addr_high = address>>8;
      0005F9 DD 6E FB         [19] 1092 	ld	l, -5 (ix)
                                   1093 ;device.c:321: addr_low = address&0xff;
      0005FC DD 4E FA         [19] 1094 	ld	c, -6 (ix)
                                   1095 ;device.c:322: convertToStr (addr_high,ihx_output_line+5);
      0005FF C5               [11] 1096 	push	bc
      000600 D5               [11] 1097 	push	de
      000601 11r68r00         [10] 1098 	ld	de, #(_ihx_output_line + 0x0005)
      000604 D5               [11] 1099 	push	de
      000605 7D               [ 4] 1100 	ld	a, l
      000606 F5               [11] 1101 	push	af
      000607 33               [ 6] 1102 	inc	sp
      000608 CDrD8r04         [17] 1103 	call	_convertToStr
      00060B F1               [10] 1104 	pop	af
      00060C 33               [ 6] 1105 	inc	sp
      00060D D1               [10] 1106 	pop	de
      00060E C1               [10] 1107 	pop	bc
                                   1108 ;device.c:323: convertToStr (addr_low,ihx_output_line+7);
      00060F D5               [11] 1109 	push	de
      000610 21r6Ar00         [10] 1110 	ld	hl, #(_ihx_output_line + 0x0007)
      000613 E5               [11] 1111 	push	hl
      000614 79               [ 4] 1112 	ld	a, c
      000615 F5               [11] 1113 	push	af
      000616 33               [ 6] 1114 	inc	sp
      000617 CDrD8r04         [17] 1115 	call	_convertToStr
      00061A F1               [10] 1116 	pop	af
                                   1117 ;device.c:331: char* membufptr = ihx_output_line+11;
      00061B DD 36 FEr6E      [19] 1118 	ld	-2 (ix), #<((_ihx_output_line + 0x000b))
      00061F DD 36 FFs00      [19] 1119 	ld	-1 (ix), #>((_ihx_output_line + 0x000b))
      000623 33               [ 6] 1120 	inc	sp
      000624 D1               [10] 1121 	pop	de
                                   1122 ;device.c:332: for (int i=0;i<0x10;i++)
      000625 01 00 00         [10] 1123 	ld	bc, #0x0000
      000628                       1124 00103$:
      000628 79               [ 4] 1125 	ld	a, c
      000629 D6 10            [ 7] 1126 	sub	a, #0x10
      00062B 78               [ 4] 1127 	ld	a, b
      00062C 17               [ 4] 1128 	rla
      00062D 3F               [ 4] 1129 	ccf
      00062E 1F               [ 4] 1130 	rra
      00062F DE 80            [ 7] 1131 	sbc	a, #0x80
      000631 30 3B            [12] 1132 	jr	NC, 00101$
                                   1133 ;device.c:334: value = host_readByte(address+i);
      000633 DD 7E FA         [19] 1134 	ld	a, -6 (ix)
      000636 DD 66 FB         [19] 1135 	ld	h, -5 (ix)
      000639 DD 71 FC         [19] 1136 	ld	-4 (ix), c
      00063C DD 70 FD         [19] 1137 	ld	-3 (ix), b
      00063F DD 86 FC         [19] 1138 	add	a, -4 (ix)
      000642 6F               [ 4] 1139 	ld	l, a
      000643 7C               [ 4] 1140 	ld	a, h
      000644 DD 8E FD         [19] 1141 	adc	a, -3 (ix)
      000647 67               [ 4] 1142 	ld	h, a
      000648 C5               [11] 1143 	push	bc
      000649 D5               [11] 1144 	push	de
      00064A CDr00r00         [17] 1145 	call	_host_readByte
      00064D 7D               [ 4] 1146 	ld	a, l
      00064E DD 6E FE         [19] 1147 	ld	l, -2 (ix)
      000651 DD 66 FF         [19] 1148 	ld	h, -1 (ix)
      000654 E5               [11] 1149 	push	hl
      000655 F5               [11] 1150 	push	af
      000656 33               [ 6] 1151 	inc	sp
      000657 CDrD8r04         [17] 1152 	call	_convertToStr
      00065A F1               [10] 1153 	pop	af
      00065B 33               [ 6] 1154 	inc	sp
      00065C D1               [10] 1155 	pop	de
      00065D C1               [10] 1156 	pop	bc
                                   1157 ;device.c:336: membufptr+=2;
      00065E DD 7E FE         [19] 1158 	ld	a, -2 (ix)
      000661 C6 02            [ 7] 1159 	add	a, #0x02
      000663 DD 77 FE         [19] 1160 	ld	-2 (ix), a
      000666 30 03            [12] 1161 	jr	NC, 00118$
      000668 DD 34 FF         [23] 1162 	inc	-1 (ix)
      00066B                       1163 00118$:
                                   1164 ;device.c:332: for (int i=0;i<0x10;i++)
      00066B 03               [ 6] 1165 	inc	bc
      00066C 18 BA            [12] 1166 	jr	00103$
      00066E                       1167 00101$:
                                   1168 ;device.c:349: wrk->memory_address += 0x10;
      00066E 6B               [ 4] 1169 	ld	l, e
      00066F 62               [ 4] 1170 	ld	h, d
      000670 4E               [ 7] 1171 	ld	c, (hl)
      000671 23               [ 6] 1172 	inc	hl
      000672 46               [ 7] 1173 	ld	b, (hl)
      000673 21 10 00         [10] 1174 	ld	hl, #0x0010
      000676 09               [11] 1175 	add	hl, bc
      000677 4D               [ 4] 1176 	ld	c, l
      000678 44               [ 4] 1177 	ld	b, h
      000679 79               [ 4] 1178 	ld	a, c
      00067A 12               [ 7] 1179 	ld	(de), a
      00067B 13               [ 6] 1180 	inc	de
      00067C 78               [ 4] 1181 	ld	a, b
      00067D 12               [ 7] 1182 	ld	(de), a
                                   1183 ;device.c:350: }
      00067E DD F9            [10] 1184 	ld	sp, ix
      000680 DD E1            [14] 1185 	pop	ix
      000682 C9               [10] 1186 	ret
                                   1187 ;device.c:352: void device_send (WORKAREA* wrk,char* buffer,uint16_t length)
                                   1188 ;	---------------------------------
                                   1189 ; Function device_send
                                   1190 ; ---------------------------------
      000683                       1191 _device_send::
                                   1192 ;device.c:354: wrk->dataToTransferEP2 = (uint8_t*) buffer;
      000683 D1               [10] 1193 	pop	de
      000684 C1               [10] 1194 	pop	bc
      000685 C5               [11] 1195 	push	bc
      000686 D5               [11] 1196 	push	de
      000687 21 45 00         [10] 1197 	ld	hl, #0x0045
      00068A 09               [11] 1198 	add	hl, bc
      00068B FD 21 04 00      [14] 1199 	ld	iy, #4
      00068F FD 39            [15] 1200 	add	iy, sp
      000691 FD 7E 00         [19] 1201 	ld	a, 0 (iy)
      000694 77               [ 7] 1202 	ld	(hl), a
      000695 23               [ 6] 1203 	inc	hl
      000696 FD 7E 01         [19] 1204 	ld	a, 1 (iy)
      000699 77               [ 7] 1205 	ld	(hl), a
                                   1206 ;device.c:355: wrk->dataTransferLengthEP2 = length;
      00069A 21 49 00         [10] 1207 	ld	hl, #0x0049
      00069D 09               [11] 1208 	add	hl, bc
      00069E FD 7E 02         [19] 1209 	ld	a, 2 (iy)
      0006A1 FD 23            [10] 1210 	inc	iy
      0006A3 FD 23            [10] 1211 	inc	iy
      0006A5 77               [ 7] 1212 	ld	(hl), a
      0006A6 23               [ 6] 1213 	inc	hl
      0006A7 FD 7E 01         [19] 1214 	ld	a, 1 (iy)
      0006AA 77               [ 7] 1215 	ld	(hl), a
                                   1216 ;device.c:356: writeDataForEndpoint2 (wrk);
      0006AB C5               [11] 1217 	push	bc
      0006AC CDr36r03         [17] 1218 	call	_writeDataForEndpoint2
      0006AF F1               [10] 1219 	pop	af
                                   1220 ;device.c:357: }
      0006B0 C9               [10] 1221 	ret
                                   1222 ;device.c:358: void device_send_welcome (WORKAREA* wrk)
                                   1223 ;	---------------------------------
                                   1224 ; Function device_send_welcome
                                   1225 ; ---------------------------------
      0006B1                       1226 _device_send_welcome::
                                   1227 ;device.c:360: device_send (wrk,WELCOME_MSG,sizeof (WELCOME_MSG));
      0006B1 21 E0 00         [10] 1228 	ld	hl, #0x00e0
      0006B4 E5               [11] 1229 	push	hl
      0006B5 21rC0r00         [10] 1230 	ld	hl, #_WELCOME_MSG
      0006B8 E5               [11] 1231 	push	hl
      0006B9 21 06 00         [10] 1232 	ld	hl, #6
      0006BC 39               [11] 1233 	add	hl, sp
      0006BD 4E               [ 7] 1234 	ld	c, (hl)
      0006BE 23               [ 6] 1235 	inc	hl
      0006BF 46               [ 7] 1236 	ld	b, (hl)
      0006C0 C5               [11] 1237 	push	bc
      0006C1 CDr83r06         [17] 1238 	call	_device_send
      0006C4 21 06 00         [10] 1239 	ld	hl, #6
      0006C7 39               [11] 1240 	add	hl, sp
      0006C8 F9               [ 6] 1241 	ld	sp, hl
                                   1242 ;device.c:361: }
      0006C9 C9               [10] 1243 	ret
                                   1244 ;device.c:363: void read_and_send_host()
                                   1245 ;	---------------------------------
                                   1246 ; Function read_and_send_host
                                   1247 ; ---------------------------------
      0006CA                       1248 _read_and_send_host::
                                   1249 ;device.c:366: writeCommand(CH375_CMD_RD_USB_DATA_UNLOCK);
      0006CA 2E 28            [ 7] 1250 	ld	l, #0x28
      0006CC CDr00r00         [17] 1251 	call	_writeCommand
                                   1252 ;device.c:367: length = readData();
      0006CF CDr00r00         [17] 1253 	call	_readData
      0006D2 7D               [ 4] 1254 	ld	a, l
      0006D3 4F               [ 4] 1255 	ld	c, a
                                   1256 ;device.c:368: if (length)
      0006D4 B7               [ 4] 1257 	or	a, a
      0006D5 C8               [11] 1258 	ret	Z
                                   1259 ;device.c:370: for (uint8_t i=0;i<length;i++)
      0006D6 06 00            [ 7] 1260 	ld	b, #0x00
      0006D8                       1261 00105$:
      0006D8 78               [ 4] 1262 	ld	a, b
      0006D9 91               [ 4] 1263 	sub	a, c
      0006DA D0               [11] 1264 	ret	NC
                                   1265 ;device.c:371: host_putchar (readData());
      0006DB C5               [11] 1266 	push	bc
      0006DC CDr00r00         [17] 1267 	call	_readData
      0006DF CDr00r00         [17] 1268 	call	_host_putchar
      0006E2 C1               [10] 1269 	pop	bc
                                   1270 ;device.c:370: for (uint8_t i=0;i<length;i++)
      0006E3 04               [ 4] 1271 	inc	b
                                   1272 ;device.c:373: }
      0006E4 18 F2            [12] 1273 	jr	00105$
                                   1274 ;device.c:375: INTERRUPT_RESULT read_and_process_data(WORKAREA* wrk)
                                   1275 ;	---------------------------------
                                   1276 ; Function read_and_process_data
                                   1277 ; ---------------------------------
      0006E6                       1278 _read_and_process_data::
      0006E6 DD E5            [15] 1279 	push	ix
      0006E8 DD 21 00 00      [14] 1280 	ld	ix,#0
      0006EC DD 39            [15] 1281 	add	ix,sp
      0006EE 21 EC FF         [10] 1282 	ld	hl, #-20
      0006F1 39               [11] 1283 	add	hl, sp
      0006F2 F9               [ 6] 1284 	ld	sp, hl
                                   1285 ;device.c:377: INTERRUPT_RESULT intres = DEVICE_INTERRUPT_OKAY;
      0006F3 DD 36 EC 00      [19] 1286 	ld	-20 (ix), #0
                                   1287 ;device.c:380: writeCommand(CH375_CMD_RD_USB_DATA_UNLOCK);
      0006F7 2E 28            [ 7] 1288 	ld	l, #0x28
      0006F9 CDr00r00         [17] 1289 	call	_writeCommand
                                   1290 ;device.c:381: length = readData(); // read length
      0006FC CDr00r00         [17] 1291 	call	_readData
      0006FF DD 75 FF         [19] 1292 	ld	-1 (ix), l
      000702 DD 75 ED         [19] 1293 	ld	-19 (ix), l
                                   1294 ;device.c:382: if (length==0)
      000705 DD 7E FF         [19] 1295 	ld	a, -1 (ix)
      000708 B7               [ 4] 1296 	or	a, a
      000709 20 05            [12] 1297 	jr	NZ, 00102$
                                   1298 ;device.c:383: return DEVICE_INTERRUPT_ERROR;
      00070B 2E 01            [ 7] 1299 	ld	l, #0x01
      00070D C3r46r0C         [10] 1300 	jp	00158$
      000710                       1301 00102$:
                                   1302 ;device.c:387: char* pstrMonitorEcho = strMonitorEcho;
      000710 DD 36 FDr00      [19] 1303 	ld	-3 (ix), #<(_strMonitorEcho)
      000714 DD 36 FEs00      [19] 1304 	ld	-2 (ix), #>(_strMonitorEcho)
                                   1305 ;device.c:388: wrk->dataToTransferEP2 = NULL;
      000718 DD 7E 04         [19] 1306 	ld	a, 4 (ix)
      00071B DD 77 EE         [19] 1307 	ld	-18 (ix), a
      00071E DD 7E 05         [19] 1308 	ld	a, 5 (ix)
      000721 DD 77 EF         [19] 1309 	ld	-17 (ix), a
      000724 DD 7E EE         [19] 1310 	ld	a, -18 (ix)
      000727 C6 45            [ 7] 1311 	add	a, #0x45
      000729 DD 77 F0         [19] 1312 	ld	-16 (ix), a
      00072C DD 7E EF         [19] 1313 	ld	a, -17 (ix)
      00072F CE 00            [ 7] 1314 	adc	a, #0x00
      000731 DD 77 F1         [19] 1315 	ld	-15 (ix), a
      000734 DD 6E F0         [19] 1316 	ld	l, -16 (ix)
      000737 DD 66 F1         [19] 1317 	ld	h, -15 (ix)
      00073A AF               [ 4] 1318 	xor	a, a
      00073B 77               [ 7] 1319 	ld	(hl), a
      00073C 23               [ 6] 1320 	inc	hl
      00073D 77               [ 7] 1321 	ld	(hl), a
                                   1322 ;device.c:389: wrk->dataTransferLengthEP2 = 0;
      00073E DD 7E EE         [19] 1323 	ld	a, -18 (ix)
      000741 C6 49            [ 7] 1324 	add	a, #0x49
      000743 DD 77 F2         [19] 1325 	ld	-14 (ix), a
      000746 DD 7E EF         [19] 1326 	ld	a, -17 (ix)
      000749 CE 00            [ 7] 1327 	adc	a, #0x00
      00074B DD 77 F3         [19] 1328 	ld	-13 (ix), a
      00074E DD 6E F2         [19] 1329 	ld	l, -14 (ix)
      000751 DD 66 F3         [19] 1330 	ld	h, -13 (ix)
      000754 AF               [ 4] 1331 	xor	a, a
      000755 77               [ 7] 1332 	ld	(hl), a
      000756 23               [ 6] 1333 	inc	hl
      000757 77               [ 7] 1334 	ld	(hl), a
                                   1335 ;device.c:391: for (uint8_t i=0;i<length;i++)
      000758 DD 7E EE         [19] 1336 	ld	a, -18 (ix)
      00075B DD 77 F4         [19] 1337 	ld	-12 (ix), a
      00075E DD 7E EF         [19] 1338 	ld	a, -17 (ix)
      000761 DD 77 F5         [19] 1339 	ld	-11 (ix), a
      000764 DD 7E EE         [19] 1340 	ld	a, -18 (ix)
      000767 DD 77 F6         [19] 1341 	ld	-10 (ix), a
      00076A DD 7E EF         [19] 1342 	ld	a, -17 (ix)
      00076D DD 77 F7         [19] 1343 	ld	-9 (ix), a
      000770 DD 7E EE         [19] 1344 	ld	a, -18 (ix)
      000773 DD 77 F8         [19] 1345 	ld	-8 (ix), a
      000776 DD 7E EF         [19] 1346 	ld	a, -17 (ix)
      000779 DD 77 F9         [19] 1347 	ld	-7 (ix), a
      00077C DD 36 FF 00      [19] 1348 	ld	-1 (ix), #0
      000780                       1349 00156$:
      000780 DD 7E FF         [19] 1350 	ld	a, -1 (ix)
      000783 DD 96 ED         [19] 1351 	sub	a, -19 (ix)
      000786 D2rC2r0B         [10] 1352 	jp	NC, 00152$
                                   1353 ;device.c:393: value = toupper(readData());
      000789 CDr00r00         [17] 1354 	call	_readData
      00078C DD 75 FC         [19] 1355 	ld	-4 (ix), l
      00078F DD 75 FB         [19] 1356 	ld	-5 (ix), l
      000792 DD 36 FC 00      [19] 1357 	ld	-4 (ix), #0
      000796 26 00            [ 7] 1358 	ld	h, #0
      000798 E5               [11] 1359 	push	hl
      000799 CDr00r00         [17] 1360 	call	_toupper
      00079C F1               [10] 1361 	pop	af
      00079D DD 75 FB         [19] 1362 	ld	-5 (ix), l
      0007A0 DD 74 FC         [19] 1363 	ld	-4 (ix), h
      0007A3 DD 7E FB         [19] 1364 	ld	a, -5 (ix)
      0007A6 DD 77 FA         [19] 1365 	ld	-6 (ix), a
                                   1366 ;device.c:395: if (wrk->processing_command!=CMD_IHX && value!=':')
      0007A9 DD 7E EE         [19] 1367 	ld	a, -18 (ix)
      0007AC C6 50            [ 7] 1368 	add	a, #0x50
      0007AE DD 77 FB         [19] 1369 	ld	-5 (ix), a
      0007B1 DD 7E EF         [19] 1370 	ld	a, -17 (ix)
      0007B4 CE 00            [ 7] 1371 	adc	a, #0x00
      0007B6 DD 77 FC         [19] 1372 	ld	-4 (ix), a
      0007B9 DD 6E FB         [19] 1373 	ld	l, -5 (ix)
      0007BC DD 66 FC         [19] 1374 	ld	h, -4 (ix)
      0007BF 7E               [ 7] 1375 	ld	a, (hl)
      0007C0 D6 04            [ 7] 1376 	sub	a, #0x04
      0007C2 28 19            [12] 1377 	jr	Z, 00104$
      0007C4 DD 7E FA         [19] 1378 	ld	a, -6 (ix)
      0007C7 D6 3A            [ 7] 1379 	sub	a, #0x3a
      0007C9 28 12            [12] 1380 	jr	Z, 00104$
                                   1381 ;device.c:396: *pstrMonitorEcho++ = value;
      0007CB DD 6E FD         [19] 1382 	ld	l, -3 (ix)
      0007CE DD 66 FE         [19] 1383 	ld	h, -2 (ix)
      0007D1 DD 7E FA         [19] 1384 	ld	a, -6 (ix)
      0007D4 77               [ 7] 1385 	ld	(hl), a
      0007D5 DD 34 FD         [23] 1386 	inc	-3 (ix)
      0007D8 20 03            [12] 1387 	jr	NZ, 00313$
      0007DA DD 34 FE         [23] 1388 	inc	-2 (ix)
      0007DD                       1389 00313$:
      0007DD                       1390 00104$:
                                   1391 ;device.c:399: switch (value)
      0007DD DD 7E FA         [19] 1392 	ld	a, -6 (ix)
      0007E0 D6 0D            [ 7] 1393 	sub	a, #0x0d
      0007E2 CAr5Br09         [10] 1394 	jp	Z,00131$
      0007E5 DD 7E FA         [19] 1395 	ld	a, -6 (ix)
      0007E8 D6 1B            [ 7] 1396 	sub	a, #0x1b
      0007EA CAr2Br09         [10] 1397 	jp	Z,00130$
      0007ED DD 7E FA         [19] 1398 	ld	a, -6 (ix)
      0007F0 D6 3A            [ 7] 1399 	sub	a, #0x3a
      0007F2 CArC5r08         [10] 1400 	jp	Z,00121$
      0007F5 DD 7E FA         [19] 1401 	ld	a, -6 (ix)
      0007F8 D6 42            [ 7] 1402 	sub	a, #0x42
      0007FA CAr8Dr08         [10] 1403 	jp	Z,00115$
      0007FD DD 7E FA         [19] 1404 	ld	a, -6 (ix)
      000800 D6 47            [ 7] 1405 	sub	a, #0x47
      000802 28 29            [12] 1406 	jr	Z, 00106$
      000804 DD 7E FA         [19] 1407 	ld	a, -6 (ix)
      000807 D6 48            [ 7] 1408 	sub	a, #0x48
      000809 CArA9r08         [10] 1409 	jp	Z,00118$
      00080C DD 7E FA         [19] 1410 	ld	a, -6 (ix)
      00080F D6 4C            [ 7] 1411 	sub	a, #0x4c
      000811 CAr09r09         [10] 1412 	jp	Z,00127$
      000814 DD 7E FA         [19] 1413 	ld	a, -6 (ix)
      000817 D6 4D            [ 7] 1414 	sub	a, #0x4d
      000819 28 34            [12] 1415 	jr	Z, 00109$
      00081B DD 7E FA         [19] 1416 	ld	a, -6 (ix)
      00081E D6 52            [ 7] 1417 	sub	a, #0x52
      000820 28 4F            [12] 1418 	jr	Z, 00112$
      000822 DD 7E FA         [19] 1419 	ld	a, -6 (ix)
      000825 D6 53            [ 7] 1420 	sub	a, #0x53
      000827 CArE7r08         [10] 1421 	jp	Z,00124$
      00082A C3r8Er0B         [10] 1422 	jp	00148$
                                   1423 ;device.c:401: case 'G': 
      00082D                       1424 00106$:
                                   1425 ;device.c:402: if (wrk->processing_command==CMD_NULL)
      00082D DD 6E FB         [19] 1426 	ld	l, -5 (ix)
      000830 DD 66 FC         [19] 1427 	ld	h, -4 (ix)
      000833 7E               [ 7] 1428 	ld	a, (hl)
      000834 B7               [ 4] 1429 	or	a, a
      000835 C2r8Er0B         [10] 1430 	jp	NZ, 00148$
                                   1431 ;device.c:404: wrk->processing_command = CMD_GO; 
      000838 DD 6E FB         [19] 1432 	ld	l, -5 (ix)
      00083B DD 66 FC         [19] 1433 	ld	h, -4 (ix)
      00083E 36 01            [10] 1434 	ld	(hl), #0x01
                                   1435 ;device.c:405: pstrMonitorCmdArgs = strMonitorCmdArgs;
      000840 FD 21rD2r00      [14] 1436 	ld	iy, #_pstrMonitorCmdArgs
      000844 FD 36 00r91      [19] 1437 	ld	0 (iy), #<(_strMonitorCmdArgs)
      000848 FD 36 01s00      [19] 1438 	ld	1 (iy), #>(_strMonitorCmdArgs)
                                   1439 ;device.c:407: break;
      00084C C3r8Er0B         [10] 1440 	jp	00148$
                                   1441 ;device.c:408: case 'M': 
      00084F                       1442 00109$:
                                   1443 ;device.c:409: if (wrk->processing_command==CMD_NULL)
      00084F DD 6E FB         [19] 1444 	ld	l, -5 (ix)
      000852 DD 66 FC         [19] 1445 	ld	h, -4 (ix)
      000855 7E               [ 7] 1446 	ld	a, (hl)
      000856 B7               [ 4] 1447 	or	a, a
      000857 C2r8Er0B         [10] 1448 	jp	NZ, 00148$
                                   1449 ;device.c:411: wrk->processing_command = CMD_MEMORY; 
      00085A DD 6E FB         [19] 1450 	ld	l, -5 (ix)
      00085D DD 66 FC         [19] 1451 	ld	h, -4 (ix)
      000860 36 06            [10] 1452 	ld	(hl), #0x06
                                   1453 ;device.c:412: pstrMonitorCmdArgs = strMonitorCmdArgs;
      000862 FD 21rD2r00      [14] 1454 	ld	iy, #_pstrMonitorCmdArgs
      000866 FD 36 00r91      [19] 1455 	ld	0 (iy), #<(_strMonitorCmdArgs)
      00086A FD 36 01s00      [19] 1456 	ld	1 (iy), #>(_strMonitorCmdArgs)
                                   1457 ;device.c:414: break;
      00086E C3r8Er0B         [10] 1458 	jp	00148$
                                   1459 ;device.c:415: case 'R': 
      000871                       1460 00112$:
                                   1461 ;device.c:416: if (wrk->processing_command==CMD_NULL)
      000871 DD 6E FB         [19] 1462 	ld	l, -5 (ix)
      000874 DD 66 FC         [19] 1463 	ld	h, -4 (ix)
      000877 7E               [ 7] 1464 	ld	a, (hl)
      000878 B7               [ 4] 1465 	or	a, a
      000879 C2r8Er0B         [10] 1466 	jp	NZ, 00148$
                                   1467 ;device.c:418: wrk->processing_command = CMD_RESET; 
      00087C DD 6E FB         [19] 1468 	ld	l, -5 (ix)
      00087F DD 66 FC         [19] 1469 	ld	h, -4 (ix)
      000882 36 02            [10] 1470 	ld	(hl), #0x02
                                   1471 ;device.c:419: pstrMonitorCmdArgs = NULL;
      000884 21 00 00         [10] 1472 	ld	hl, #0x0000
      000887 22rD2r00         [16] 1473 	ld	(_pstrMonitorCmdArgs), hl
                                   1474 ;device.c:421: break;
      00088A C3r8Er0B         [10] 1475 	jp	00148$
                                   1476 ;device.c:422: case 'B': 
      00088D                       1477 00115$:
                                   1478 ;device.c:423: if (wrk->processing_command==CMD_NULL)
      00088D DD 6E FB         [19] 1479 	ld	l, -5 (ix)
      000890 DD 66 FC         [19] 1480 	ld	h, -4 (ix)
      000893 7E               [ 7] 1481 	ld	a, (hl)
      000894 B7               [ 4] 1482 	or	a, a
      000895 C2r8Er0B         [10] 1483 	jp	NZ, 00148$
                                   1484 ;device.c:425: wrk->processing_command = CMD_BASIC; 
      000898 DD 6E FB         [19] 1485 	ld	l, -5 (ix)
      00089B DD 66 FC         [19] 1486 	ld	h, -4 (ix)
      00089E 36 03            [10] 1487 	ld	(hl), #0x03
                                   1488 ;device.c:426: pstrMonitorCmdArgs = NULL;
      0008A0 21 00 00         [10] 1489 	ld	hl, #0x0000
      0008A3 22rD2r00         [16] 1490 	ld	(_pstrMonitorCmdArgs), hl
                                   1491 ;device.c:428: break;
      0008A6 C3r8Er0B         [10] 1492 	jp	00148$
                                   1493 ;device.c:429: case 'H': 
      0008A9                       1494 00118$:
                                   1495 ;device.c:430: if (wrk->processing_command==CMD_NULL)
      0008A9 DD 6E FB         [19] 1496 	ld	l, -5 (ix)
      0008AC DD 66 FC         [19] 1497 	ld	h, -4 (ix)
      0008AF 7E               [ 7] 1498 	ld	a, (hl)
      0008B0 B7               [ 4] 1499 	or	a, a
      0008B1 C2r8Er0B         [10] 1500 	jp	NZ, 00148$
                                   1501 ;device.c:432: wrk->processing_command = CMD_HELP; 
      0008B4 DD 6E FB         [19] 1502 	ld	l, -5 (ix)
      0008B7 DD 66 FC         [19] 1503 	ld	h, -4 (ix)
      0008BA 36 05            [10] 1504 	ld	(hl), #0x05
                                   1505 ;device.c:433: pstrMonitorCmdArgs = NULL;
      0008BC 21 00 00         [10] 1506 	ld	hl, #0x0000
      0008BF 22rD2r00         [16] 1507 	ld	(_pstrMonitorCmdArgs), hl
                                   1508 ;device.c:435: break;
      0008C2 C3r8Er0B         [10] 1509 	jp	00148$
                                   1510 ;device.c:436: case ':': 
      0008C5                       1511 00121$:
                                   1512 ;device.c:437: if (wrk->processing_command==CMD_NULL)
      0008C5 DD 6E FB         [19] 1513 	ld	l, -5 (ix)
      0008C8 DD 66 FC         [19] 1514 	ld	h, -4 (ix)
      0008CB 7E               [ 7] 1515 	ld	a, (hl)
      0008CC B7               [ 4] 1516 	or	a, a
      0008CD C2r8Er0B         [10] 1517 	jp	NZ, 00148$
                                   1518 ;device.c:439: wrk->processing_command = CMD_IHX; 
      0008D0 DD 6E FB         [19] 1519 	ld	l, -5 (ix)
      0008D3 DD 66 FC         [19] 1520 	ld	h, -4 (ix)
      0008D6 36 04            [10] 1521 	ld	(hl), #0x04
                                   1522 ;device.c:440: pstrMonitorCmdArgs = strMonitorCmdArgs;
      0008D8 FD 21rD2r00      [14] 1523 	ld	iy, #_pstrMonitorCmdArgs
      0008DC FD 36 00r91      [19] 1524 	ld	0 (iy), #<(_strMonitorCmdArgs)
      0008E0 FD 36 01s00      [19] 1525 	ld	1 (iy), #>(_strMonitorCmdArgs)
                                   1526 ;device.c:442: break;
      0008E4 C3r8Er0B         [10] 1527 	jp	00148$
                                   1528 ;device.c:443: case 'S': 
      0008E7                       1529 00124$:
                                   1530 ;device.c:444: if (wrk->processing_command==CMD_NULL)
      0008E7 DD 6E FB         [19] 1531 	ld	l, -5 (ix)
      0008EA DD 66 FC         [19] 1532 	ld	h, -4 (ix)
      0008ED 7E               [ 7] 1533 	ld	a, (hl)
      0008EE B7               [ 4] 1534 	or	a, a
      0008EF C2r8Er0B         [10] 1535 	jp	NZ, 00148$
                                   1536 ;device.c:446: wrk->processing_command = CMD_SAVE; 
      0008F2 DD 6E FB         [19] 1537 	ld	l, -5 (ix)
      0008F5 DD 66 FC         [19] 1538 	ld	h, -4 (ix)
      0008F8 36 07            [10] 1539 	ld	(hl), #0x07
                                   1540 ;device.c:447: pstrMonitorCmdArgs = strMonitorCmdArgs;
      0008FA FD 21rD2r00      [14] 1541 	ld	iy, #_pstrMonitorCmdArgs
      0008FE FD 36 00r91      [19] 1542 	ld	0 (iy), #<(_strMonitorCmdArgs)
      000902 FD 36 01s00      [19] 1543 	ld	1 (iy), #>(_strMonitorCmdArgs)
                                   1544 ;device.c:449: break;
      000906 C3r8Er0B         [10] 1545 	jp	00148$
                                   1546 ;device.c:450: case 'L': 
      000909                       1547 00127$:
                                   1548 ;device.c:451: if (wrk->processing_command==CMD_NULL)
      000909 DD 6E FB         [19] 1549 	ld	l, -5 (ix)
      00090C DD 66 FC         [19] 1550 	ld	h, -4 (ix)
      00090F 7E               [ 7] 1551 	ld	a, (hl)
      000910 B7               [ 4] 1552 	or	a, a
      000911 C2r8Er0B         [10] 1553 	jp	NZ, 00148$
                                   1554 ;device.c:453: wrk->processing_command = CMD_LOAD; 
      000914 DD 6E FB         [19] 1555 	ld	l, -5 (ix)
      000917 DD 66 FC         [19] 1556 	ld	h, -4 (ix)
      00091A 36 08            [10] 1557 	ld	(hl), #0x08
                                   1558 ;device.c:454: pstrMonitorCmdArgs = strMonitorCmdArgs;
      00091C FD 21rD2r00      [14] 1559 	ld	iy, #_pstrMonitorCmdArgs
      000920 FD 36 00r91      [19] 1560 	ld	0 (iy), #<(_strMonitorCmdArgs)
      000924 FD 36 01s00      [19] 1561 	ld	1 (iy), #>(_strMonitorCmdArgs)
                                   1562 ;device.c:456: break;
      000928 C3r8Er0B         [10] 1563 	jp	00148$
                                   1564 ;device.c:457: case 0x1b:
      00092B                       1565 00130$:
                                   1566 ;device.c:458: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      00092B DD 6E F0         [19] 1567 	ld	l, -16 (ix)
      00092E DD 66 F1         [19] 1568 	ld	h, -15 (ix)
      000931 36rD8            [10] 1569 	ld	(hl), #<(_NEWLINE_MSG)
      000933 23               [ 6] 1570 	inc	hl
      000934 36s01            [10] 1571 	ld	(hl), #>(_NEWLINE_MSG)
                                   1572 ;device.c:459: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      000936 DD 6E F2         [19] 1573 	ld	l, -14 (ix)
      000939 DD 66 F3         [19] 1574 	ld	h, -13 (ix)
      00093C 36 05            [10] 1575 	ld	(hl), #0x05
      00093E 23               [ 6] 1576 	inc	hl
      00093F 36 00            [10] 1577 	ld	(hl), #0x00
                                   1578 ;device.c:460: wrk->processing_command = CMD_NULL;
      000941 DD 6E FB         [19] 1579 	ld	l, -5 (ix)
      000944 DD 66 FC         [19] 1580 	ld	h, -4 (ix)
      000947 36 00            [10] 1581 	ld	(hl), #0x00
                                   1582 ;device.c:461: wrk->memory_address=0xffff;
      000949 DD 6E EE         [19] 1583 	ld	l, -18 (ix)
      00094C DD 66 EF         [19] 1584 	ld	h, -17 (ix)
      00094F 11 4D 00         [10] 1585 	ld	de, #0x004d
      000952 19               [11] 1586 	add	hl, de
      000953 36 FF            [10] 1587 	ld	(hl), #0xff
      000955 23               [ 6] 1588 	inc	hl
      000956 36 FF            [10] 1589 	ld	(hl), #0xff
                                   1590 ;device.c:462: break;
      000958 C3r8Er0B         [10] 1591 	jp	00148$
                                   1592 ;device.c:463: case '\r':
      00095B                       1593 00131$:
                                   1594 ;device.c:465: switch (wrk->processing_command)
      00095B DD 6E FB         [19] 1595 	ld	l, -5 (ix)
      00095E DD 66 FC         [19] 1596 	ld	h, -4 (ix)
      000961 4E               [ 7] 1597 	ld	c, (hl)
      000962 3E 08            [ 7] 1598 	ld	a, #0x08
      000964 91               [ 4] 1599 	sub	a, c
      000965 DAr8Er0B         [10] 1600 	jp	C, 00148$
      000968 06 00            [ 7] 1601 	ld	b, #0x00
      00096A 21r71r09         [10] 1602 	ld	hl, #00324$
      00096D 09               [11] 1603 	add	hl, bc
      00096E 09               [11] 1604 	add	hl, bc
      00096F 09               [11] 1605 	add	hl, bc
      000970 E9               [ 4] 1606 	jp	(hl)
      000971                       1607 00324$:
      000971 C3r78r0B         [10] 1608 	jp	00146$
      000974 C3r8Cr09         [10] 1609 	jp	00132$
      000977 C3rF4r09         [10] 1610 	jp	00136$
      00097A C3r18r0A         [10] 1611 	jp	00137$
      00097D C3r5Er0A         [10] 1612 	jp	00139$
      000980 C3r3Dr0A         [10] 1613 	jp	00138$
      000983 C3rBDr09         [10] 1614 	jp	00133$
      000986 C3rFFr0A         [10] 1615 	jp	00143$
      000989 C3r98r0A         [10] 1616 	jp	00140$
                                   1617 ;device.c:467: case CMD_GO:
      00098C                       1618 00132$:
                                   1619 ;device.c:468: host_go(convertHex (strMonitorCmdArgs+1,4));
      00098C 3E 04            [ 7] 1620 	ld	a, #0x04
      00098E F5               [11] 1621 	push	af
      00098F 33               [ 6] 1622 	inc	sp
      000990 21r92r00         [10] 1623 	ld	hl, #(_strMonitorCmdArgs + 0x0001)
      000993 E5               [11] 1624 	push	hl
      000994 CDr27r04         [17] 1625 	call	_convertHex
      000997 F1               [10] 1626 	pop	af
      000998 33               [ 6] 1627 	inc	sp
      000999 CDr00r00         [17] 1628 	call	_host_go
                                   1629 ;device.c:469: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      00099C DD 6E F0         [19] 1630 	ld	l, -16 (ix)
      00099F DD 66 F1         [19] 1631 	ld	h, -15 (ix)
      0009A2 36rD8            [10] 1632 	ld	(hl), #<(_NEWLINE_MSG)
      0009A4 23               [ 6] 1633 	inc	hl
      0009A5 36s01            [10] 1634 	ld	(hl), #>(_NEWLINE_MSG)
                                   1635 ;device.c:470: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      0009A7 DD 6E F2         [19] 1636 	ld	l, -14 (ix)
      0009AA DD 66 F3         [19] 1637 	ld	h, -13 (ix)
      0009AD 36 05            [10] 1638 	ld	(hl), #0x05
      0009AF 23               [ 6] 1639 	inc	hl
      0009B0 36 00            [10] 1640 	ld	(hl), #0x00
                                   1641 ;device.c:471: wrk->processing_command = CMD_NULL;
      0009B2 DD 6E FB         [19] 1642 	ld	l, -5 (ix)
      0009B5 DD 66 FC         [19] 1643 	ld	h, -4 (ix)
      0009B8 36 00            [10] 1644 	ld	(hl), #0x00
                                   1645 ;device.c:472: break;
      0009BA C3r8Er0B         [10] 1646 	jp	00148$
                                   1647 ;device.c:473: case CMD_MEMORY:
      0009BD                       1648 00133$:
                                   1649 ;device.c:474: if (wrk->memory_address==0xffff)
      0009BD DD 7E EE         [19] 1650 	ld	a, -18 (ix)
      0009C0 C6 4D            [ 7] 1651 	add	a, #0x4d
      0009C2 4F               [ 4] 1652 	ld	c, a
      0009C3 DD 7E EF         [19] 1653 	ld	a, -17 (ix)
      0009C6 CE 00            [ 7] 1654 	adc	a, #0x00
      0009C8 47               [ 4] 1655 	ld	b, a
      0009C9 69               [ 4] 1656 	ld	l, c
      0009CA 60               [ 4] 1657 	ld	h, b
      0009CB 5E               [ 7] 1658 	ld	e, (hl)
      0009CC 23               [ 6] 1659 	inc	hl
      0009CD 56               [ 7] 1660 	ld	d, (hl)
      0009CE 7B               [ 4] 1661 	ld	a, e
      0009CF A2               [ 4] 1662 	and	a, d
      0009D0 3C               [ 4] 1663 	inc	a
      0009D1 20 15            [12] 1664 	jr	NZ, 00135$
                                   1665 ;device.c:475: wrk->memory_address = convertHex (strMonitorCmdArgs+1,4);
      0009D3 C5               [11] 1666 	push	bc
      0009D4 3E 04            [ 7] 1667 	ld	a, #0x04
      0009D6 F5               [11] 1668 	push	af
      0009D7 33               [ 6] 1669 	inc	sp
      0009D8 21r92r00         [10] 1670 	ld	hl, #(_strMonitorCmdArgs + 0x0001)
      0009DB E5               [11] 1671 	push	hl
      0009DC CDr27r04         [17] 1672 	call	_convertHex
      0009DF F1               [10] 1673 	pop	af
      0009E0 33               [ 6] 1674 	inc	sp
      0009E1 EB               [ 4] 1675 	ex	de, hl
      0009E2 C1               [10] 1676 	pop	bc
      0009E3 7B               [ 4] 1677 	ld	a, e
      0009E4 02               [ 7] 1678 	ld	(bc), a
      0009E5 03               [ 6] 1679 	inc	bc
      0009E6 7A               [ 4] 1680 	ld	a, d
      0009E7 02               [ 7] 1681 	ld	(bc), a
      0009E8                       1682 00135$:
                                   1683 ;device.c:476: print_memory(wrk);
      0009E8 C1               [10] 1684 	pop	bc
      0009E9 E1               [10] 1685 	pop	hl
      0009EA E5               [11] 1686 	push	hl
      0009EB C5               [11] 1687 	push	bc
      0009EC E5               [11] 1688 	push	hl
      0009ED CDrC2r05         [17] 1689 	call	_print_memory
      0009F0 F1               [10] 1690 	pop	af
                                   1691 ;device.c:477: break;
      0009F1 C3r8Er0B         [10] 1692 	jp	00148$
                                   1693 ;device.c:478: case CMD_RESET:
      0009F4                       1694 00136$:
                                   1695 ;device.c:479: host_reset ();
      0009F4 CDr00r00         [17] 1696 	call	_host_reset
                                   1697 ;device.c:480: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      0009F7 DD 6E F0         [19] 1698 	ld	l, -16 (ix)
      0009FA DD 66 F1         [19] 1699 	ld	h, -15 (ix)
      0009FD 36rD8            [10] 1700 	ld	(hl), #<(_NEWLINE_MSG)
      0009FF 23               [ 6] 1701 	inc	hl
      000A00 36s01            [10] 1702 	ld	(hl), #>(_NEWLINE_MSG)
                                   1703 ;device.c:481: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      000A02 DD 6E F2         [19] 1704 	ld	l, -14 (ix)
      000A05 DD 66 F3         [19] 1705 	ld	h, -13 (ix)
      000A08 36 05            [10] 1706 	ld	(hl), #0x05
      000A0A 23               [ 6] 1707 	inc	hl
      000A0B 36 00            [10] 1708 	ld	(hl), #0x00
                                   1709 ;device.c:482: wrk->processing_command = CMD_NULL;
      000A0D DD 6E FB         [19] 1710 	ld	l, -5 (ix)
      000A10 DD 66 FC         [19] 1711 	ld	h, -4 (ix)
      000A13 36 00            [10] 1712 	ld	(hl), #0x00
                                   1713 ;device.c:483: break;
      000A15 C3r8Er0B         [10] 1714 	jp	00148$
                                   1715 ;device.c:484: case CMD_BASIC:
      000A18                       1716 00137$:
                                   1717 ;device.c:485: intres = MONITOR_EXIT_BASIC;
      000A18 DD 36 EC 06      [19] 1718 	ld	-20 (ix), #0x06
                                   1719 ;device.c:486: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      000A1C DD 6E F0         [19] 1720 	ld	l, -16 (ix)
      000A1F DD 66 F1         [19] 1721 	ld	h, -15 (ix)
      000A22 36rD8            [10] 1722 	ld	(hl), #<(_NEWLINE_MSG)
      000A24 23               [ 6] 1723 	inc	hl
      000A25 36s01            [10] 1724 	ld	(hl), #>(_NEWLINE_MSG)
                                   1725 ;device.c:487: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      000A27 DD 6E F2         [19] 1726 	ld	l, -14 (ix)
      000A2A DD 66 F3         [19] 1727 	ld	h, -13 (ix)
      000A2D 36 05            [10] 1728 	ld	(hl), #0x05
      000A2F 23               [ 6] 1729 	inc	hl
      000A30 36 00            [10] 1730 	ld	(hl), #0x00
                                   1731 ;device.c:488: wrk->processing_command = CMD_NULL;
      000A32 DD 6E FB         [19] 1732 	ld	l, -5 (ix)
      000A35 DD 66 FC         [19] 1733 	ld	h, -4 (ix)
      000A38 36 00            [10] 1734 	ld	(hl), #0x00
                                   1735 ;device.c:489: break;
      000A3A C3r8Er0B         [10] 1736 	jp	00148$
                                   1737 ;device.c:490: case CMD_HELP:
      000A3D                       1738 00138$:
                                   1739 ;device.c:491: wrk->dataToTransferEP2 = (uint8_t*) WELCOME_MSG;
      000A3D DD 6E F0         [19] 1740 	ld	l, -16 (ix)
      000A40 DD 66 F1         [19] 1741 	ld	h, -15 (ix)
      000A43 36rC0            [10] 1742 	ld	(hl), #<(_WELCOME_MSG)
      000A45 23               [ 6] 1743 	inc	hl
      000A46 36s00            [10] 1744 	ld	(hl), #>(_WELCOME_MSG)
                                   1745 ;device.c:492: wrk->dataTransferLengthEP2 = sizeof (WELCOME_MSG);
      000A48 DD 6E F2         [19] 1746 	ld	l, -14 (ix)
      000A4B DD 66 F3         [19] 1747 	ld	h, -13 (ix)
      000A4E 36 E0            [10] 1748 	ld	(hl), #0xe0
      000A50 23               [ 6] 1749 	inc	hl
      000A51 36 00            [10] 1750 	ld	(hl), #0x00
                                   1751 ;device.c:493: wrk->processing_command = CMD_NULL;
      000A53 DD 6E FB         [19] 1752 	ld	l, -5 (ix)
      000A56 DD 66 FC         [19] 1753 	ld	h, -4 (ix)
      000A59 36 00            [10] 1754 	ld	(hl), #0x00
                                   1755 ;device.c:494: break;
      000A5B C3r8Er0B         [10] 1756 	jp	00148$
                                   1757 ;device.c:495: case CMD_IHX:
      000A5E                       1758 00139$:
                                   1759 ;device.c:496: *pstrMonitorCmdArgs = '\0';
      000A5E 2ArD2r00         [16] 1760 	ld	hl, (_pstrMonitorCmdArgs)
      000A61 36 00            [10] 1761 	ld	(hl), #0x00
                                   1762 ;device.c:497: uint8_t bytesWritten = handleIHX (strMonitorCmdArgs+1);
      000A63 21r92r00         [10] 1763 	ld	hl, #(_strMonitorCmdArgs + 0x0001)
      000A66 E5               [11] 1764 	push	hl
      000A67 CDr13r05         [17] 1765 	call	_handleIHX
      000A6A F1               [10] 1766 	pop	af
      000A6B 7D               [ 4] 1767 	ld	a, l
                                   1768 ;device.c:499: convertToStr (bytesWritten,ihx_bytes_processed+3);
      000A6C 21r44r00         [10] 1769 	ld	hl, #(_ihx_bytes_processed + 0x0003)
      000A6F E5               [11] 1770 	push	hl
      000A70 F5               [11] 1771 	push	af
      000A71 33               [ 6] 1772 	inc	sp
      000A72 CDrD8r04         [17] 1773 	call	_convertToStr
      000A75 F1               [10] 1774 	pop	af
      000A76 33               [ 6] 1775 	inc	sp
                                   1776 ;device.c:500: wrk->dataToTransferEP2 = (uint8_t*) ihx_bytes_processed;
      000A77 DD 6E F0         [19] 1777 	ld	l, -16 (ix)
      000A7A DD 66 F1         [19] 1778 	ld	h, -15 (ix)
      000A7D 36r41            [10] 1779 	ld	(hl), #<(_ihx_bytes_processed)
      000A7F 23               [ 6] 1780 	inc	hl
      000A80 36s00            [10] 1781 	ld	(hl), #>(_ihx_bytes_processed)
                                   1782 ;device.c:501: wrk->dataTransferLengthEP2 = sizeof (ihx_bytes_processed);
      000A82 DD 6E F2         [19] 1783 	ld	l, -14 (ix)
      000A85 DD 66 F3         [19] 1784 	ld	h, -13 (ix)
      000A88 36 22            [10] 1785 	ld	(hl), #0x22
      000A8A 23               [ 6] 1786 	inc	hl
      000A8B 36 00            [10] 1787 	ld	(hl), #0x00
                                   1788 ;device.c:502: wrk->processing_command = CMD_NULL;
      000A8D DD 6E FB         [19] 1789 	ld	l, -5 (ix)
      000A90 DD 66 FC         [19] 1790 	ld	h, -4 (ix)
      000A93 36 00            [10] 1791 	ld	(hl), #0x00
                                   1792 ;device.c:503: break;
      000A95 C3r8Er0B         [10] 1793 	jp	00148$
                                   1794 ;device.c:504: case CMD_LOAD:
      000A98                       1795 00140$:
                                   1796 ;device.c:505: *pstrMonitorCmdArgs = '\0';
      000A98 2ArD2r00         [16] 1797 	ld	hl, (_pstrMonitorCmdArgs)
      000A9B 36 00            [10] 1798 	ld	(hl), #0x00
                                   1799 ;device.c:506: if ((pstrMonitorCmdArgs-strMonitorCmdArgs)>5)
      000A9D FD 21rD2r00      [14] 1800 	ld	iy, #_pstrMonitorCmdArgs
      000AA1 FD 7E 00         [19] 1801 	ld	a, 0 (iy)
      000AA4 D6r91            [ 7] 1802 	sub	a, #<(_strMonitorCmdArgs)
      000AA6 4F               [ 4] 1803 	ld	c, a
      000AA7 FD 7E 01         [19] 1804 	ld	a, 1 (iy)
      000AAA DEs00            [ 7] 1805 	sbc	a, #>(_strMonitorCmdArgs)
      000AAC 47               [ 4] 1806 	ld	b, a
      000AAD 3E 05            [ 7] 1807 	ld	a, #0x05
      000AAF B9               [ 4] 1808 	cp	a, c
      000AB0 3E 00            [ 7] 1809 	ld	a, #0x00
      000AB2 98               [ 4] 1810 	sbc	a, b
      000AB3 E2rB8r0A         [10] 1811 	jp	PO, 00327$
      000AB6 EE 80            [ 7] 1812 	xor	a, #0x80
      000AB8                       1813 00327$:
      000AB8 F2rD2r0A         [10] 1814 	jp	P, 00142$
                                   1815 ;device.c:507: host_load(convertHex (strMonitorCmdArgs+1,4),strMonitorCmdArgs+6);
      000ABB 3E 04            [ 7] 1816 	ld	a, #0x04
      000ABD F5               [11] 1817 	push	af
      000ABE 33               [ 6] 1818 	inc	sp
      000ABF 21r92r00         [10] 1819 	ld	hl, #(_strMonitorCmdArgs + 0x0001)
      000AC2 E5               [11] 1820 	push	hl
      000AC3 CDr27r04         [17] 1821 	call	_convertHex
      000AC6 F1               [10] 1822 	pop	af
      000AC7 33               [ 6] 1823 	inc	sp
      000AC8 11r97r00         [10] 1824 	ld	de, #(_strMonitorCmdArgs + 0x0006)
      000ACB D5               [11] 1825 	push	de
      000ACC E5               [11] 1826 	push	hl
      000ACD CDr00r00         [17] 1827 	call	_host_load
      000AD0 F1               [10] 1828 	pop	af
      000AD1 F1               [10] 1829 	pop	af
      000AD2                       1830 00142$:
                                   1831 ;device.c:508: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      000AD2 DD 6E F6         [19] 1832 	ld	l, -10 (ix)
      000AD5 DD 66 F7         [19] 1833 	ld	h, -9 (ix)
      000AD8 11 45 00         [10] 1834 	ld	de, #0x0045
      000ADB 19               [11] 1835 	add	hl, de
      000ADC 36rD8            [10] 1836 	ld	(hl), #<(_NEWLINE_MSG)
      000ADE 23               [ 6] 1837 	inc	hl
      000ADF 36s01            [10] 1838 	ld	(hl), #>(_NEWLINE_MSG)
                                   1839 ;device.c:509: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      000AE1 DD 6E F6         [19] 1840 	ld	l, -10 (ix)
      000AE4 DD 66 F7         [19] 1841 	ld	h, -9 (ix)
      000AE7 11 49 00         [10] 1842 	ld	de, #0x0049
      000AEA 19               [11] 1843 	add	hl, de
      000AEB 36 05            [10] 1844 	ld	(hl), #0x05
      000AED 23               [ 6] 1845 	inc	hl
      000AEE 36 00            [10] 1846 	ld	(hl), #0x00
                                   1847 ;device.c:510: wrk->processing_command = CMD_NULL;
      000AF0 DD 6E F6         [19] 1848 	ld	l, -10 (ix)
      000AF3 DD 66 F7         [19] 1849 	ld	h, -9 (ix)
      000AF6 11 50 00         [10] 1850 	ld	de, #0x0050
      000AF9 19               [11] 1851 	add	hl, de
      000AFA 36 00            [10] 1852 	ld	(hl), #0x00
                                   1853 ;device.c:511: break;
      000AFC C3r8Er0B         [10] 1854 	jp	00148$
                                   1855 ;device.c:512: case CMD_SAVE:
      000AFF                       1856 00143$:
                                   1857 ;device.c:513: *pstrMonitorCmdArgs = '\0';
      000AFF 2ArD2r00         [16] 1858 	ld	hl, (_pstrMonitorCmdArgs)
      000B02 36 00            [10] 1859 	ld	(hl), #0x00
                                   1860 ;device.c:514: if ((pstrMonitorCmdArgs-strMonitorCmdArgs)>10)
      000B04 FD 21rD2r00      [14] 1861 	ld	iy, #_pstrMonitorCmdArgs
      000B08 FD 7E 00         [19] 1862 	ld	a, 0 (iy)
      000B0B D6r91            [ 7] 1863 	sub	a, #<(_strMonitorCmdArgs)
      000B0D 4F               [ 4] 1864 	ld	c, a
      000B0E FD 7E 01         [19] 1865 	ld	a, 1 (iy)
      000B11 DEs00            [ 7] 1866 	sbc	a, #>(_strMonitorCmdArgs)
      000B13 47               [ 4] 1867 	ld	b, a
      000B14 3E 0A            [ 7] 1868 	ld	a, #0x0a
      000B16 B9               [ 4] 1869 	cp	a, c
      000B17 3E 00            [ 7] 1870 	ld	a, #0x00
      000B19 98               [ 4] 1871 	sbc	a, b
      000B1A E2r1Fr0B         [10] 1872 	jp	PO, 00328$
      000B1D EE 80            [ 7] 1873 	xor	a, #0x80
      000B1F                       1874 00328$:
      000B1F F2r4Cr0B         [10] 1875 	jp	P, 00145$
                                   1876 ;device.c:515: host_save(convertHex (strMonitorCmdArgs+1,4),convertHex (strMonitorCmdArgs+6,4),strMonitorCmdArgs+11);
      000B22 3E 04            [ 7] 1877 	ld	a, #0x04
      000B24 F5               [11] 1878 	push	af
      000B25 33               [ 6] 1879 	inc	sp
      000B26 21r97r00         [10] 1880 	ld	hl, #(_strMonitorCmdArgs + 0x0006)
      000B29 E5               [11] 1881 	push	hl
      000B2A CDr27r04         [17] 1882 	call	_convertHex
      000B2D F1               [10] 1883 	pop	af
      000B2E 33               [ 6] 1884 	inc	sp
      000B2F E5               [11] 1885 	push	hl
      000B30 3E 04            [ 7] 1886 	ld	a, #0x04
      000B32 F5               [11] 1887 	push	af
      000B33 33               [ 6] 1888 	inc	sp
      000B34 21r92r00         [10] 1889 	ld	hl, #(_strMonitorCmdArgs + 0x0001)
      000B37 E5               [11] 1890 	push	hl
      000B38 CDr27r04         [17] 1891 	call	_convertHex
      000B3B F1               [10] 1892 	pop	af
      000B3C 33               [ 6] 1893 	inc	sp
      000B3D D1               [10] 1894 	pop	de
      000B3E 01r9Cr00         [10] 1895 	ld	bc, #(_strMonitorCmdArgs + 0x000b)
      000B41 C5               [11] 1896 	push	bc
      000B42 D5               [11] 1897 	push	de
      000B43 E5               [11] 1898 	push	hl
      000B44 CDr00r00         [17] 1899 	call	_host_save
      000B47 21 06 00         [10] 1900 	ld	hl, #6
      000B4A 39               [11] 1901 	add	hl, sp
      000B4B F9               [ 6] 1902 	ld	sp, hl
      000B4C                       1903 00145$:
                                   1904 ;device.c:516: wrk->dataToTransferEP2 = (uint8_t*) NEWLINE_MSG;
      000B4C DD 6E F4         [19] 1905 	ld	l, -12 (ix)
      000B4F DD 66 F5         [19] 1906 	ld	h, -11 (ix)
      000B52 11 45 00         [10] 1907 	ld	de, #0x0045
      000B55 19               [11] 1908 	add	hl, de
      000B56 36rD8            [10] 1909 	ld	(hl), #<(_NEWLINE_MSG)
      000B58 23               [ 6] 1910 	inc	hl
      000B59 36s01            [10] 1911 	ld	(hl), #>(_NEWLINE_MSG)
                                   1912 ;device.c:517: wrk->dataTransferLengthEP2 = sizeof (NEWLINE_MSG);
      000B5B DD 6E F4         [19] 1913 	ld	l, -12 (ix)
      000B5E DD 66 F5         [19] 1914 	ld	h, -11 (ix)
      000B61 11 49 00         [10] 1915 	ld	de, #0x0049
      000B64 19               [11] 1916 	add	hl, de
      000B65 36 05            [10] 1917 	ld	(hl), #0x05
      000B67 23               [ 6] 1918 	inc	hl
      000B68 36 00            [10] 1919 	ld	(hl), #0x00
                                   1920 ;device.c:518: wrk->processing_command = CMD_NULL;
      000B6A DD 6E F4         [19] 1921 	ld	l, -12 (ix)
      000B6D DD 66 F5         [19] 1922 	ld	h, -11 (ix)
      000B70 11 50 00         [10] 1923 	ld	de, #0x0050
      000B73 19               [11] 1924 	add	hl, de
      000B74 36 00            [10] 1925 	ld	(hl), #0x00
                                   1926 ;device.c:519: break;
      000B76 18 16            [12] 1927 	jr	00148$
                                   1928 ;device.c:520: case CMD_NULL:
      000B78                       1929 00146$:
                                   1930 ;device.c:521: wrk->dataToTransferEP2 = (uint8_t*) UNKNOWN_MSG;
      000B78 DD 6E F0         [19] 1931 	ld	l, -16 (ix)
      000B7B DD 66 F1         [19] 1932 	ld	h, -15 (ix)
      000B7E 36rA0            [10] 1933 	ld	(hl), #<(_UNKNOWN_MSG)
      000B80 23               [ 6] 1934 	inc	hl
      000B81 36s01            [10] 1935 	ld	(hl), #>(_UNKNOWN_MSG)
                                   1936 ;device.c:522: wrk->dataTransferLengthEP2 = sizeof (UNKNOWN_MSG);
      000B83 DD 6E F2         [19] 1937 	ld	l, -14 (ix)
      000B86 DD 66 F3         [19] 1938 	ld	h, -13 (ix)
      000B89 36 16            [10] 1939 	ld	(hl), #0x16
      000B8B 23               [ 6] 1940 	inc	hl
      000B8C 36 00            [10] 1941 	ld	(hl), #0x00
                                   1942 ;device.c:527: }
      000B8E                       1943 00148$:
                                   1944 ;device.c:528: if (wrk->processing_command!=CMD_NULL && pstrMonitorCmdArgs != NULL)
      000B8E DD 6E F8         [19] 1945 	ld	l, -8 (ix)
      000B91 DD 66 F9         [19] 1946 	ld	h, -7 (ix)
      000B94 11 50 00         [10] 1947 	ld	de, #0x0050
      000B97 19               [11] 1948 	add	hl, de
      000B98 7E               [ 7] 1949 	ld	a, (hl)
      000B99 B7               [ 4] 1950 	or	a, a
      000B9A 28 20            [12] 1951 	jr	Z, 00157$
      000B9C FD 21rD2r00      [14] 1952 	ld	iy, #_pstrMonitorCmdArgs
      000BA0 FD 7E 01         [19] 1953 	ld	a, 1 (iy)
      000BA3 FD B6 00         [19] 1954 	or	a, 0 (iy)
      000BA6 28 14            [12] 1955 	jr	Z, 00157$
                                   1956 ;device.c:529: *(pstrMonitorCmdArgs++) = value;
      000BA8 2ArD2r00         [16] 1957 	ld	hl, (_pstrMonitorCmdArgs)
      000BAB DD 75 FB         [19] 1958 	ld	-5 (ix), l
      000BAE DD 74 FC         [19] 1959 	ld	-4 (ix), h
      000BB1 DD 7E FA         [19] 1960 	ld	a, -6 (ix)
      000BB4 77               [ 7] 1961 	ld	(hl), a
      000BB5 2ArD2r00         [16] 1962 	ld	hl, (_pstrMonitorCmdArgs)
      000BB8 23               [ 6] 1963 	inc	hl
      000BB9 22rD2r00         [16] 1964 	ld	(_pstrMonitorCmdArgs), hl
      000BBC                       1965 00157$:
                                   1966 ;device.c:391: for (uint8_t i=0;i<length;i++)
      000BBC DD 34 FF         [23] 1967 	inc	-1 (ix)
      000BBF C3r80r07         [10] 1968 	jp	00156$
      000BC2                       1969 00152$:
                                   1970 ;device.c:533: if (wrk->dataToTransferEP2==NULL)
      000BC2 DD 7E 04         [19] 1971 	ld	a, 4 (ix)
      000BC5 DD 77 F7         [19] 1972 	ld	-9 (ix), a
      000BC8 DD 7E 05         [19] 1973 	ld	a, 5 (ix)
      000BCB DD 77 F8         [19] 1974 	ld	-8 (ix), a
      000BCE DD 7E F7         [19] 1975 	ld	a, -9 (ix)
      000BD1 C6 45            [ 7] 1976 	add	a, #0x45
      000BD3 DD 77 F9         [19] 1977 	ld	-7 (ix), a
      000BD6 DD 7E F8         [19] 1978 	ld	a, -8 (ix)
      000BD9 CE 00            [ 7] 1979 	adc	a, #0x00
      000BDB DD 77 FA         [19] 1980 	ld	-6 (ix), a
      000BDE DD 6E F9         [19] 1981 	ld	l, -7 (ix)
      000BE1 DD 66 FA         [19] 1982 	ld	h, -6 (ix)
      000BE4 7E               [ 7] 1983 	ld	a, (hl)
      000BE5 DD 77 FB         [19] 1984 	ld	-5 (ix), a
      000BE8 23               [ 6] 1985 	inc	hl
      000BE9 7E               [ 7] 1986 	ld	a, (hl)
      000BEA DD 77 FC         [19] 1987 	ld	-4 (ix), a
      000BED DD B6 FB         [19] 1988 	or	a, -5 (ix)
      000BF0 20 46            [12] 1989 	jr	NZ, 00154$
                                   1990 ;device.c:536: wrk->dataToTransferEP2 = (uint8_t*) strMonitorEcho;
      000BF2 DD 6E F9         [19] 1991 	ld	l, -7 (ix)
      000BF5 DD 66 FA         [19] 1992 	ld	h, -6 (ix)
      000BF8 36r00            [10] 1993 	ld	(hl), #<(_strMonitorEcho)
      000BFA 23               [ 6] 1994 	inc	hl
      000BFB 36s00            [10] 1995 	ld	(hl), #>(_strMonitorEcho)
                                   1996 ;device.c:537: wrk->dataTransferLengthEP2 = pstrMonitorEcho - strMonitorEcho;
      000BFD DD 7E F7         [19] 1997 	ld	a, -9 (ix)
      000C00 C6 49            [ 7] 1998 	add	a, #0x49
      000C02 DD 77 F9         [19] 1999 	ld	-7 (ix), a
      000C05 DD 7E F8         [19] 2000 	ld	a, -8 (ix)
      000C08 CE 00            [ 7] 2001 	adc	a, #0x00
      000C0A DD 77 FA         [19] 2002 	ld	-6 (ix), a
      000C0D DD 7E FD         [19] 2003 	ld	a, -3 (ix)
      000C10 D6r00            [ 7] 2004 	sub	a, #<(_strMonitorEcho)
      000C12 DD 77 FB         [19] 2005 	ld	-5 (ix), a
      000C15 DD 7E FE         [19] 2006 	ld	a, -2 (ix)
      000C18 DEs00            [ 7] 2007 	sbc	a, #>(_strMonitorEcho)
      000C1A DD 77 FC         [19] 2008 	ld	-4 (ix), a
      000C1D DD 7E FB         [19] 2009 	ld	a, -5 (ix)
      000C20 DD 77 FE         [19] 2010 	ld	-2 (ix), a
      000C23 DD 7E FC         [19] 2011 	ld	a, -4 (ix)
      000C26 DD 77 FF         [19] 2012 	ld	-1 (ix), a
      000C29 DD 6E F9         [19] 2013 	ld	l, -7 (ix)
      000C2C DD 66 FA         [19] 2014 	ld	h, -6 (ix)
      000C2F DD 7E FE         [19] 2015 	ld	a, -2 (ix)
      000C32 77               [ 7] 2016 	ld	(hl), a
      000C33 23               [ 6] 2017 	inc	hl
      000C34 DD 7E FF         [19] 2018 	ld	a, -1 (ix)
      000C37 77               [ 7] 2019 	ld	(hl), a
      000C38                       2020 00154$:
                                   2021 ;device.c:539: writeDataForEndpoint2 (wrk);  
      000C38 DD 6E F7         [19] 2022 	ld	l, -9 (ix)
      000C3B DD 66 F8         [19] 2023 	ld	h, -8 (ix)
      000C3E E5               [11] 2024 	push	hl
      000C3F CDr36r03         [17] 2025 	call	_writeDataForEndpoint2
      000C42 F1               [10] 2026 	pop	af
                                   2027 ;device.c:541: return intres;
      000C43 DD 6E EC         [19] 2028 	ld	l, -20 (ix)
      000C46                       2029 00158$:
                                   2030 ;device.c:542: }
      000C46 DD F9            [10] 2031 	ld	sp, ix
      000C48 DD E1            [14] 2032 	pop	ix
      000C4A C9               [10] 2033 	ret
                                   2034 ;device.c:543: INTERRUPT_RESULT handleEP0SetupClass (WORKAREA* wrk)
                                   2035 ;	---------------------------------
                                   2036 ; Function handleEP0SetupClass
                                   2037 ; ---------------------------------
      000C4B                       2038 _handleEP0SetupClass::
      000C4B DD E5            [15] 2039 	push	ix
      000C4D DD 21 00 00      [14] 2040 	ld	ix,#0
      000C51 DD 39            [15] 2041 	add	ix,sp
      000C53 3B               [ 6] 2042 	dec	sp
                                   2043 ;device.c:545: INTERRUPT_RESULT intres = DEVICE_INTERRUPT_OKAY;
      000C54 DD 36 FF 00      [19] 2044 	ld	-1 (ix), #0
                                   2045 ;device.c:549: switch (request.r.bRequest)              // Analyze the class request code and process it
      000C58 21rD5r00         [10] 2046 	ld	hl, #_request + 1
      000C5B 7E               [ 7] 2047 	ld	a, (hl)
      000C5C FE 20            [ 7] 2048 	cp	a,#0x20
      000C5E 28 4B            [12] 2049 	jr	Z, 00109$
      000C60 FE 21            [ 7] 2050 	cp	a,#0x21
      000C62 28 06            [12] 2051 	jr	Z, 00102$
      000C64 D6 22            [ 7] 2052 	sub	a, #0x22
      000C66 28 2F            [12] 2053 	jr	Z, 00103$
      000C68 18 41            [12] 2054 	jr	00109$
                                   2055 ;device.c:558: case GET_LINE_CODING: // GET_LINE_CODING
      000C6A                       2056 00102$:
                                   2057 ;device.c:562: wrk->dataToTransferEP0 = (uint8_t*) &uart_parameters;
      000C6A DD 4E 04         [19] 2058 	ld	c, 4 (ix)
      000C6D DD 46 05         [19] 2059 	ld	b, 5 (ix)
      000C70 21 43 00         [10] 2060 	ld	hl, #0x0043
      000C73 09               [11] 2061 	add	hl, bc
      000C74 EB               [ 4] 2062 	ex	de, hl
      000C75 3Er14            [ 7] 2063 	ld	a, #<(_uart_parameters)
      000C77 12               [ 7] 2064 	ld	(de), a
      000C78 13               [ 6] 2065 	inc	de
      000C79 3Es01            [ 7] 2066 	ld	a, #>(_uart_parameters)
      000C7B 12               [ 7] 2067 	ld	(de), a
                                   2068 ;device.c:563: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(UART_PARA),request.r.wLength);;
      000C7C 21 47 00         [10] 2069 	ld	hl, #0x0047
      000C7F 09               [11] 2070 	add	hl, bc
      000C80 EB               [ 4] 2071 	ex	de, hl
      000C81 ED 4BrDAr00      [20] 2072 	ld	bc, (#_request + 6)
      000C85 3E 07            [ 7] 2073 	ld	a, #0x07
      000C87 B9               [ 4] 2074 	cp	a, c
      000C88 3E 00            [ 7] 2075 	ld	a, #0x00
      000C8A 98               [ 4] 2076 	sbc	a, b
      000C8B 30 03            [12] 2077 	jr	NC, 00112$
      000C8D 01 07 00         [10] 2078 	ld	bc, #0x0007
      000C90                       2079 00112$:
      000C90 79               [ 4] 2080 	ld	a, c
      000C91 12               [ 7] 2081 	ld	(de), a
      000C92 13               [ 6] 2082 	inc	de
      000C93 78               [ 4] 2083 	ld	a, b
      000C94 12               [ 7] 2084 	ld	(de), a
                                   2085 ;device.c:564: break;
      000C95 18 14            [12] 2086 	jr	00109$
                                   2087 ;device.c:565: case SET_CONTROL_LINE_STATE: // SET_CONTROL_LINE_STATE
      000C97                       2088 00103$:
                                   2089 ;device.c:569: sendEP0ACK ();
      000C97 CDr6Ar02         [17] 2090 	call	_sendEP0ACK
                                   2091 ;device.c:570: if (request.r.wValue && 0x01)
      000C9A 2ArD6r00         [16] 2092 	ld	hl, (#_request + 2)
      000C9D 7C               [ 4] 2093 	ld	a, h
      000C9E B5               [ 4] 2094 	or	a, l
      000C9F 28 06            [12] 2095 	jr	Z, 00105$
                                   2096 ;device.c:571: intres = DEVICE_SERIAL_CONNECTED;   
      000CA1 DD 36 FF 04      [19] 2097 	ld	-1 (ix), #0x04
      000CA5 18 04            [12] 2098 	jr	00109$
      000CA7                       2099 00105$:
                                   2100 ;device.c:573: intres = DEVICE_SERIAL_DISCONNECTED;   
      000CA7 DD 36 FF 05      [19] 2101 	ld	-1 (ix), #0x05
                                   2102 ;device.c:580: }            
      000CAB                       2103 00109$:
                                   2104 ;device.c:581: return intres;
      000CAB DD 6E FF         [19] 2105 	ld	l, -1 (ix)
                                   2106 ;device.c:582: }
      000CAE 33               [ 6] 2107 	inc	sp
      000CAF DD E1            [14] 2108 	pop	ix
      000CB1 C9               [10] 2109 	ret
                                   2110 ;device.c:583: INTERRUPT_RESULT handleEP0SetupStandard(WORKAREA* wrk)
                                   2111 ;	---------------------------------
                                   2112 ; Function handleEP0SetupStandard
                                   2113 ; ---------------------------------
      000CB2                       2114 _handleEP0SetupStandard::
      000CB2 DD E5            [15] 2115 	push	ix
      000CB4 DD 21 00 00      [14] 2116 	ld	ix,#0
      000CB8 DD 39            [15] 2117 	add	ix,sp
      000CBA 21 F7 FF         [10] 2118 	ld	hl, #-9
      000CBD 39               [11] 2119 	add	hl, sp
      000CBE F9               [ 6] 2120 	ld	sp, hl
                                   2121 ;device.c:585: INTERRUPT_RESULT intres = DEVICE_INTERRUPT_OKAY;
      000CBF DD 36 F7 00      [19] 2122 	ld	-9 (ix), #0
                                   2123 ;device.c:589: switch(request.r.bRequest)
      000CC3 21rD5r00         [10] 2124 	ld	hl, #_request + 1
      000CC6 6E               [ 7] 2125 	ld	l, (hl)
      000CC7 7D               [ 4] 2126 	ld	a, l
      000CC8 B7               [ 4] 2127 	or	a, a
      000CC9 CAr95r0E         [10] 2128 	jp	Z,00122$
      000CCC 7D               [ 4] 2129 	ld	a, l
      000CCD 3D               [ 4] 2130 	dec	a
      000CCE CAr95r0E         [10] 2131 	jp	Z,00122$
                                   2132 ;device.c:597: switch (request.r.wValue>>8)
      000CD1 11rD6r00         [10] 2133 	ld	de, #_request + 2
                                   2134 ;device.c:604: wrk->dataToTransferEP0 = (uint8_t*) DevDes;
      000CD4 DD 4E 04         [19] 2135 	ld	c, 4 (ix)
      000CD7 DD 46 05         [19] 2136 	ld	b, 5 (ix)
                                   2137 ;device.c:589: switch(request.r.bRequest)
      000CDA 7D               [ 4] 2138 	ld	a, l
      000CDB D6 05            [ 7] 2139 	sub	a, #0x05
      000CDD CAr72r0E         [10] 2140 	jp	Z,00115$
                                   2141 ;device.c:604: wrk->dataToTransferEP0 = (uint8_t*) DevDes;
      000CE0 79               [ 4] 2142 	ld	a, c
      000CE1 C6 43            [ 7] 2143 	add	a, #0x43
      000CE3 DD 77 F8         [19] 2144 	ld	-8 (ix), a
      000CE6 78               [ 4] 2145 	ld	a, b
      000CE7 CE 00            [ 7] 2146 	adc	a, #0x00
      000CE9 DD 77 F9         [19] 2147 	ld	-7 (ix), a
                                   2148 ;device.c:605: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(DevDes),request.r.wLength);
      000CEC 79               [ 4] 2149 	ld	a, c
      000CED C6 47            [ 7] 2150 	add	a, #0x47
      000CEF DD 77 FA         [19] 2151 	ld	-6 (ix), a
      000CF2 78               [ 4] 2152 	ld	a, b
      000CF3 CE 00            [ 7] 2153 	adc	a, #0x00
      000CF5 DD 77 FB         [19] 2154 	ld	-5 (ix), a
                                   2155 ;device.c:589: switch(request.r.bRequest)
      000CF8 7D               [ 4] 2156 	ld	a, l
      000CF9 D6 06            [ 7] 2157 	sub	a, #0x06
      000CFB 28 15            [12] 2158 	jr	Z, 00101$
                                   2159 ;device.c:678: wrk->dataToTransferEP0 = &(wrk->usb_configuration_id);
      000CFD 79               [ 4] 2160 	ld	a, c
      000CFE C6 4C            [ 7] 2161 	add	a, #0x4c
      000D00 4F               [ 4] 2162 	ld	c, a
      000D01 30 01            [12] 2163 	jr	NC, 00242$
      000D03 04               [ 4] 2164 	inc	b
      000D04                       2165 00242$:
                                   2166 ;device.c:589: switch(request.r.bRequest)
      000D04 7D               [ 4] 2167 	ld	a,l
      000D05 FE 08            [ 7] 2168 	cp	a,#0x08
      000D07 CAr5Cr0E         [10] 2169 	jp	Z,00112$
      000D0A D6 09            [ 7] 2170 	sub	a, #0x09
      000D0C CAr81r0E         [10] 2171 	jp	Z,00116$
      000D0F C3r95r0E         [10] 2172 	jp	00122$
                                   2173 ;device.c:593: case USB_REQ_GET_DESCRIPTOR:
      000D12                       2174 00101$:
                                   2175 ;device.c:597: switch (request.r.wValue>>8)
      000D12 1A               [ 7] 2176 	ld	a, (de)
      000D13 DD 77 FC         [19] 2177 	ld	-4 (ix), a
      000D16 13               [ 6] 2178 	inc	de
      000D17 1A               [ 7] 2179 	ld	a, (de)
      000D18 DD 77 FD         [19] 2180 	ld	-3 (ix), a
      000D1B 4F               [ 4] 2181 	ld	c, a
      000D1C 06 00            [ 7] 2182 	ld	b, #0x00
      000D1E DD 71 FE         [19] 2183 	ld	-2 (ix), c
      000D21 DD 70 FF         [19] 2184 	ld	-1 (ix), b
                                   2185 ;device.c:605: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(DevDes),request.r.wLength);
                                   2186 ;device.c:597: switch (request.r.wValue>>8)
      000D24 DD 7E FE         [19] 2187 	ld	a, -2 (ix)
      000D27 3D               [ 4] 2188 	dec	a
      000D28 DD B6 FF         [19] 2189 	or	a, -1 (ix)
      000D2B 28 17            [12] 2190 	jr	Z, 00102$
      000D2D DD 7E FE         [19] 2191 	ld	a, -2 (ix)
      000D30 D6 02            [ 7] 2192 	sub	a, #0x02
      000D32 DD B6 FF         [19] 2193 	or	a, -1 (ix)
      000D35 28 33            [12] 2194 	jr	Z, 00103$
      000D37 DD 7E FE         [19] 2195 	ld	a, -2 (ix)
      000D3A D6 03            [ 7] 2196 	sub	a, #0x03
      000D3C DD B6 FF         [19] 2197 	or	a, -1 (ix)
      000D3F 28 4F            [12] 2198 	jr	Z, 00104$
      000D41 C3r4Fr0E         [10] 2199 	jp	00111$
                                   2200 ;device.c:599: case USB_DESC_DEVICE: 
      000D44                       2201 00102$:
                                   2202 ;device.c:604: wrk->dataToTransferEP0 = (uint8_t*) DevDes;
      000D44 DD 6E F8         [19] 2203 	ld	l, -8 (ix)
      000D47 DD 66 F9         [19] 2204 	ld	h, -7 (ix)
      000D4A 36r25            [10] 2205 	ld	(hl), #<(_DevDes)
      000D4C 23               [ 6] 2206 	inc	hl
      000D4D 36s00            [10] 2207 	ld	(hl), #>(_DevDes)
                                   2208 ;device.c:605: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(DevDes),request.r.wLength);
      000D4F ED 4BrDAr00      [20] 2209 	ld	bc, (#(_request + 0x0006) + 0)
      000D53 3E 12            [ 7] 2210 	ld	a, #0x12
      000D55 B9               [ 4] 2211 	cp	a, c
      000D56 3E 00            [ 7] 2212 	ld	a, #0x00
      000D58 98               [ 4] 2213 	sbc	a, b
      000D59 30 03            [12] 2214 	jr	NC, 00125$
      000D5B 01 12 00         [10] 2215 	ld	bc, #0x0012
      000D5E                       2216 00125$:
      000D5E DD 6E FA         [19] 2217 	ld	l, -6 (ix)
      000D61 DD 66 FB         [19] 2218 	ld	h, -5 (ix)
      000D64 71               [ 7] 2219 	ld	(hl), c
      000D65 23               [ 6] 2220 	inc	hl
      000D66 70               [ 7] 2221 	ld	(hl), b
                                   2222 ;device.c:606: break;
      000D67 C3r4Fr0E         [10] 2223 	jp	00111$
                                   2224 ;device.c:608: case USB_DESC_CONFIGURATION: 
      000D6A                       2225 00103$:
                                   2226 ;device.c:613: wrk->dataToTransferEP0 = (uint8_t*) ConDes;
      000D6A DD 6E F8         [19] 2227 	ld	l, -8 (ix)
      000D6D DD 66 F9         [19] 2228 	ld	h, -7 (ix)
      000D70 36r37            [10] 2229 	ld	(hl), #<(_ConDes)
      000D72 23               [ 6] 2230 	inc	hl
      000D73 36s00            [10] 2231 	ld	(hl), #>(_ConDes)
                                   2232 ;device.c:614: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(ConDes),request.r.wLength);
      000D75 ED 4BrDAr00      [20] 2233 	ld	bc, (#(_request + 0x0006) + 0)
      000D79 3E 43            [ 7] 2234 	ld	a, #0x43
      000D7B B9               [ 4] 2235 	cp	a, c
      000D7C 3E 00            [ 7] 2236 	ld	a, #0x00
      000D7E 98               [ 4] 2237 	sbc	a, b
      000D7F 30 03            [12] 2238 	jr	NC, 00127$
      000D81 01 43 00         [10] 2239 	ld	bc, #0x0043
      000D84                       2240 00127$:
      000D84 DD 6E FA         [19] 2241 	ld	l, -6 (ix)
      000D87 DD 66 FB         [19] 2242 	ld	h, -5 (ix)
      000D8A 71               [ 7] 2243 	ld	(hl), c
      000D8B 23               [ 6] 2244 	inc	hl
      000D8C 70               [ 7] 2245 	ld	(hl), b
                                   2246 ;device.c:615: break;
      000D8D C3r4Fr0E         [10] 2247 	jp	00111$
                                   2248 ;device.c:617: case USB_DESC_STRING: 
      000D90                       2249 00104$:
                                   2250 ;device.c:622: uint8_t stringIndex = request.r.wValue&0xff;  
      000D90 DD 7E FC         [19] 2251 	ld	a, -4 (ix)
                                   2252 ;device.c:623: switch(stringIndex)
      000D93 B7               [ 4] 2253 	or	a, a
      000D94 28 0F            [12] 2254 	jr	Z, 00105$
      000D96 FE 01            [ 7] 2255 	cp	a, #0x01
      000D98 28 56            [12] 2256 	jr	Z, 00107$
      000D9A FE 02            [ 7] 2257 	cp	a, #0x02
      000D9C 28 2D            [12] 2258 	jr	Z, 00106$
      000D9E D6 03            [ 7] 2259 	sub	a, #0x03
      000DA0 28 73            [12] 2260 	jr	Z, 00108$
      000DA2 C3r4Fr0E         [10] 2261 	jp	00111$
                                   2262 ;device.c:625: case 0: 
      000DA5                       2263 00105$:
                                   2264 ;device.c:630: wrk->dataToTransferEP0 = (uint8_t*) LangDes;
      000DA5 DD 6E F8         [19] 2265 	ld	l, -8 (ix)
      000DA8 DD 66 F9         [19] 2266 	ld	h, -7 (ix)
      000DAB 36r7A            [10] 2267 	ld	(hl), #<(_LangDes)
      000DAD 23               [ 6] 2268 	inc	hl
      000DAE 36s00            [10] 2269 	ld	(hl), #>(_LangDes)
                                   2270 ;device.c:631: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(LangDes),request.r.wLength);
      000DB0 ED 4BrDAr00      [20] 2271 	ld	bc, (#(_request + 0x0006) + 0)
      000DB4 3E 04            [ 7] 2272 	ld	a, #0x04
      000DB6 B9               [ 4] 2273 	cp	a, c
      000DB7 3E 00            [ 7] 2274 	ld	a, #0x00
      000DB9 98               [ 4] 2275 	sbc	a, b
      000DBA 30 03            [12] 2276 	jr	NC, 00129$
      000DBC 01 04 00         [10] 2277 	ld	bc, #0x0004
      000DBF                       2278 00129$:
      000DBF DD 6E FA         [19] 2279 	ld	l, -6 (ix)
      000DC2 DD 66 FB         [19] 2280 	ld	h, -5 (ix)
      000DC5 71               [ 7] 2281 	ld	(hl), c
      000DC6 23               [ 6] 2282 	inc	hl
      000DC7 70               [ 7] 2283 	ld	(hl), b
                                   2284 ;device.c:632: break;
      000DC8 C3r4Fr0E         [10] 2285 	jp	00111$
                                   2286 ;device.c:634: case STRING_DESC_PRODUCT: 
      000DCB                       2287 00106$:
                                   2288 ;device.c:639: wrk->dataToTransferEP0 = (uint8_t*) PRODUCER_Des;
      000DCB DD 6E F8         [19] 2289 	ld	l, -8 (ix)
      000DCE DD 66 F9         [19] 2290 	ld	h, -7 (ix)
      000DD1 36r92            [10] 2291 	ld	(hl), #<(_PRODUCER_Des)
      000DD3 23               [ 6] 2292 	inc	hl
      000DD4 36s00            [10] 2293 	ld	(hl), #>(_PRODUCER_Des)
                                   2294 ;device.c:640: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(PRODUCER_Des),request.r.wLength);
      000DD6 ED 4BrDAr00      [20] 2295 	ld	bc, (#(_request + 0x0006) + 0)
      000DDA 3E 1C            [ 7] 2296 	ld	a, #0x1c
      000DDC B9               [ 4] 2297 	cp	a, c
      000DDD 3E 00            [ 7] 2298 	ld	a, #0x00
      000DDF 98               [ 4] 2299 	sbc	a, b
      000DE0 30 03            [12] 2300 	jr	NC, 00131$
      000DE2 01 1C 00         [10] 2301 	ld	bc, #0x001c
      000DE5                       2302 00131$:
      000DE5 DD 6E FA         [19] 2303 	ld	l, -6 (ix)
      000DE8 DD 66 FB         [19] 2304 	ld	h, -5 (ix)
      000DEB 71               [ 7] 2305 	ld	(hl), c
      000DEC 23               [ 6] 2306 	inc	hl
      000DED 70               [ 7] 2307 	ld	(hl), b
                                   2308 ;device.c:641: break;
      000DEE 18 5F            [12] 2309 	jr	00111$
                                   2310 ;device.c:643: case STRING_DESC_MANUFACTURER: 
      000DF0                       2311 00107$:
                                   2312 ;device.c:648: wrk->dataToTransferEP0 = (uint8_t*) MANUFACTURER_Des;
      000DF0 DD 6E F8         [19] 2313 	ld	l, -8 (ix)
      000DF3 DD 66 F9         [19] 2314 	ld	h, -7 (ix)
      000DF6 36r7E            [10] 2315 	ld	(hl), #<(_MANUFACTURER_Des)
      000DF8 23               [ 6] 2316 	inc	hl
      000DF9 36s00            [10] 2317 	ld	(hl), #>(_MANUFACTURER_Des)
                                   2318 ;device.c:649: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(MANUFACTURER_Des),request.r.wLength);
      000DFB ED 4BrDAr00      [20] 2319 	ld	bc, (#(_request + 0x0006) + 0)
      000DFF 3E 14            [ 7] 2320 	ld	a, #0x14
      000E01 B9               [ 4] 2321 	cp	a, c
      000E02 3E 00            [ 7] 2322 	ld	a, #0x00
      000E04 98               [ 4] 2323 	sbc	a, b
      000E05 30 03            [12] 2324 	jr	NC, 00133$
      000E07 01 14 00         [10] 2325 	ld	bc, #0x0014
      000E0A                       2326 00133$:
      000E0A DD 6E FA         [19] 2327 	ld	l, -6 (ix)
      000E0D DD 66 FB         [19] 2328 	ld	h, -5 (ix)
      000E10 71               [ 7] 2329 	ld	(hl), c
      000E11 23               [ 6] 2330 	inc	hl
      000E12 70               [ 7] 2331 	ld	(hl), b
                                   2332 ;device.c:650: break;
      000E13 18 3A            [12] 2333 	jr	00111$
                                   2334 ;device.c:652: case STRING_DESC_SERIAL:
      000E15                       2335 00108$:
                                   2336 ;device.c:657: wrk->dataToTransferEP0 = (uint8_t*) PRODUCER_SN_Des;
      000E15 DD 6E F8         [19] 2337 	ld	l, -8 (ix)
      000E18 DD 66 F9         [19] 2338 	ld	h, -7 (ix)
      000E1B 36rAE            [10] 2339 	ld	(hl), #<(_PRODUCER_SN_Des)
      000E1D 23               [ 6] 2340 	inc	hl
      000E1E 36s00            [10] 2341 	ld	(hl), #>(_PRODUCER_SN_Des)
                                   2342 ;device.c:658: wrk->dataTransferLengthEP0 = min ((uint16_t) sizeof(PRODUCER_SN_Des),request.r.wLength);
      000E20 21rDAr00         [10] 2343 	ld	hl, #(_request + 0x0006)
      000E23 7E               [ 7] 2344 	ld	a, (hl)
      000E24 DD 77 FE         [19] 2345 	ld	-2 (ix), a
      000E27 23               [ 6] 2346 	inc	hl
      000E28 7E               [ 7] 2347 	ld	a, (hl)
      000E29 DD 77 FF         [19] 2348 	ld	-1 (ix), a
      000E2C 3E 12            [ 7] 2349 	ld	a, #0x12
      000E2E DD BE FE         [19] 2350 	cp	a, -2 (ix)
      000E31 3E 00            [ 7] 2351 	ld	a, #0x00
      000E33 DD 9E FF         [19] 2352 	sbc	a, -1 (ix)
      000E36 30 08            [12] 2353 	jr	NC, 00135$
      000E38 DD 36 FE 12      [19] 2354 	ld	-2 (ix), #0x12
      000E3C DD 36 FF 00      [19] 2355 	ld	-1 (ix), #0
      000E40                       2356 00135$:
      000E40 DD 6E FA         [19] 2357 	ld	l, -6 (ix)
      000E43 DD 66 FB         [19] 2358 	ld	h, -5 (ix)
      000E46 DD 7E FE         [19] 2359 	ld	a, -2 (ix)
      000E49 77               [ 7] 2360 	ld	(hl), a
      000E4A 23               [ 6] 2361 	inc	hl
      000E4B DD 7E FF         [19] 2362 	ld	a, -1 (ix)
      000E4E 77               [ 7] 2363 	ld	(hl), a
                                   2364 ;device.c:671: }
      000E4F                       2365 00111$:
                                   2366 ;device.c:672: writeDataForEndpoint0(wrk);
      000E4F DD 6E 04         [19] 2367 	ld	l, 4 (ix)
      000E52 DD 66 05         [19] 2368 	ld	h, 5 (ix)
      000E55 E5               [11] 2369 	push	hl
      000E56 CDr88r02         [17] 2370 	call	_writeDataForEndpoint0
      000E59 F1               [10] 2371 	pop	af
                                   2372 ;device.c:673: break;                   
      000E5A 18 39            [12] 2373 	jr	00122$
                                   2374 ;device.c:674: case USB_REQ_GET_CONFIGURATION:
      000E5C                       2375 00112$:
                                   2376 ;device.c:678: wrk->dataToTransferEP0 = &(wrk->usb_configuration_id);
      000E5C DD 6E F8         [19] 2377 	ld	l, -8 (ix)
      000E5F DD 66 F9         [19] 2378 	ld	h, -7 (ix)
      000E62 71               [ 7] 2379 	ld	(hl), c
      000E63 23               [ 6] 2380 	inc	hl
      000E64 70               [ 7] 2381 	ld	(hl), b
                                   2382 ;device.c:679: wrk->dataTransferLengthEP0 = 1;
      000E65 DD 6E FA         [19] 2383 	ld	l, -6 (ix)
      000E68 DD 66 FB         [19] 2384 	ld	h, -5 (ix)
      000E6B 36 01            [10] 2385 	ld	(hl), #0x01
      000E6D 23               [ 6] 2386 	inc	hl
      000E6E 36 00            [10] 2387 	ld	(hl), #0x00
                                   2388 ;device.c:680: break;
      000E70 18 23            [12] 2389 	jr	00122$
                                   2390 ;device.c:693: case USB_REQ_SET_ADDRESS:
      000E72                       2391 00115$:
                                   2392 ;device.c:694: intres = DEVICE_ADDRESS_SET;
      000E72 DD 36 F7 02      [19] 2393 	ld	-9 (ix), #0x02
                                   2394 ;device.c:695: wrk->usb_device_address = request.r.wValue;
      000E76 21 4B 00         [10] 2395 	ld	hl, #0x004b
      000E79 09               [11] 2396 	add	hl, bc
      000E7A 1A               [ 7] 2397 	ld	a, (de)
      000E7B 77               [ 7] 2398 	ld	(hl), a
                                   2399 ;device.c:699: sendEP0ACK ();
      000E7C CDr6Ar02         [17] 2400 	call	_sendEP0ACK
                                   2401 ;device.c:700: break;
      000E7F 18 14            [12] 2402 	jr	00122$
                                   2403 ;device.c:701: case USB_REQ_SET_CONFIGURATION:
      000E81                       2404 00116$:
                                   2405 ;device.c:702: intres = DEVICE_CONFIGURATION_SET;
      000E81 DD 36 F7 03      [19] 2406 	ld	-9 (ix), #0x03
                                   2407 ;device.c:706: if (request.r.wValue==USB_CONFIGURATION_ID) 
      000E85 EB               [ 4] 2408 	ex	de,hl
      000E86 5E               [ 7] 2409 	ld	e, (hl)
      000E87 23               [ 6] 2410 	inc	hl
      000E88 56               [ 7] 2411 	ld	d, (hl)
      000E89 6B               [ 4] 2412 	ld	l, e
      000E8A 62               [ 4] 2413 	ld	h, d
      000E8B 7D               [ 4] 2414 	ld	a, l
      000E8C 3D               [ 4] 2415 	dec	a
      000E8D B4               [ 4] 2416 	or	a, h
      000E8E 20 02            [12] 2417 	jr	NZ, 00118$
                                   2418 ;device.c:707: wrk->usb_configuration_id = request.r.wValue;
      000E90 7B               [ 4] 2419 	ld	a, e
      000E91 02               [ 7] 2420 	ld	(bc), a
      000E92                       2421 00118$:
                                   2422 ;device.c:708: sendEP0ACK ();
      000E92 CDr6Ar02         [17] 2423 	call	_sendEP0ACK
                                   2424 ;device.c:725: }
      000E95                       2425 00122$:
                                   2426 ;device.c:726: return intres;
      000E95 DD 6E F7         [19] 2427 	ld	l, -9 (ix)
                                   2428 ;device.c:727: }
      000E98 DD F9            [10] 2429 	ld	sp, ix
      000E9A DD E1            [14] 2430 	pop	ix
      000E9C C9               [10] 2431 	ret
                                   2432 ;device.c:728: INTERRUPT_RESULT handleEP0Setup (WORKAREA* wrk)
                                   2433 ;	---------------------------------
                                   2434 ; Function handleEP0Setup
                                   2435 ; ---------------------------------
      000E9D                       2436 _handleEP0Setup::
      000E9D DD E5            [15] 2437 	push	ix
      000E9F DD 21 00 00      [14] 2438 	ld	ix,#0
      000EA3 DD 39            [15] 2439 	add	ix,sp
      000EA5 F5               [11] 2440 	push	af
      000EA6 3B               [ 6] 2441 	dec	sp
                                   2442 ;device.c:730: INTERRUPT_RESULT intres = DEVICE_INTERRUPT_OKAY;
      000EA7 DD 36 FD 00      [19] 2443 	ld	-3 (ix), #0
                                   2444 ;device.c:735: wrk->transaction_state = SETUP;
      000EAB DD 4E 04         [19] 2445 	ld	c, 4 (ix)
      000EAE DD 46 05         [19] 2446 	ld	b, 5 (ix)
      000EB1 21 4F 00         [10] 2447 	ld	hl, #0x004f
      000EB4 09               [11] 2448 	add	hl, bc
      000EB5 36 00            [10] 2449 	ld	(hl), #0x00
                                   2450 ;device.c:740: size_t length = read_usb_data (request.buffer);
      000EB7 C5               [11] 2451 	push	bc
      000EB8 21rD4r00         [10] 2452 	ld	hl, #_request
      000EBB E5               [11] 2453 	push	hl
      000EBC CDrDEr03         [17] 2454 	call	_read_usb_data
      000EBF F1               [10] 2455 	pop	af
      000EC0 C1               [10] 2456 	pop	bc
                                   2457 ;device.c:749: wrk->dataTransferLengthEP0 = request.r.wLength;
      000EC1 21 47 00         [10] 2458 	ld	hl, #0x0047
      000EC4 09               [11] 2459 	add	hl, bc
      000EC5 DD 75 FE         [19] 2460 	ld	-2 (ix), l
      000EC8 DD 74 FF         [19] 2461 	ld	-1 (ix), h
      000ECB ED 5BrDAr00      [20] 2462 	ld	de, (#_request + 6)
      000ECF DD 6E FE         [19] 2463 	ld	l, -2 (ix)
      000ED2 DD 66 FF         [19] 2464 	ld	h, -1 (ix)
      000ED5 73               [ 7] 2465 	ld	(hl), e
      000ED6 23               [ 6] 2466 	inc	hl
      000ED7 72               [ 7] 2467 	ld	(hl), d
                                   2468 ;device.c:751: switch (request.r.bmRequestType & USB_TYPE_MASK)
      000ED8 3ArD4r00         [13] 2469 	ld	a, (#_request + 0)
      000EDB E6 60            [ 7] 2470 	and	a,#0x60
      000EDD 28 06            [12] 2471 	jr	Z, 00101$
      000EDF D6 20            [ 7] 2472 	sub	a, #0x20
      000EE1 28 0C            [12] 2473 	jr	Z, 00102$
      000EE3 18 12            [12] 2474 	jr	00104$
                                   2475 ;device.c:753: case USB_TYPE_STANDARD: 
      000EE5                       2476 00101$:
                                   2477 ;device.c:754: intres = handleEP0SetupStandard (wrk); 
      000EE5 C5               [11] 2478 	push	bc
      000EE6 CDrB2r0C         [17] 2479 	call	_handleEP0SetupStandard
      000EE9 F1               [10] 2480 	pop	af
      000EEA DD 75 FD         [19] 2481 	ld	-3 (ix), l
                                   2482 ;device.c:755: break;
      000EED 18 08            [12] 2483 	jr	00104$
                                   2484 ;device.c:756: case USB_TYPE_CLASS:    
      000EEF                       2485 00102$:
                                   2486 ;device.c:757: intres = handleEP0SetupClass (wrk); 
      000EEF C5               [11] 2487 	push	bc
      000EF0 CDr4Br0C         [17] 2488 	call	_handleEP0SetupClass
      000EF3 F1               [10] 2489 	pop	af
      000EF4 DD 75 FD         [19] 2490 	ld	-3 (ix), l
                                   2491 ;device.c:764: }
      000EF7                       2492 00104$:
                                   2493 ;device.c:765: return intres;
      000EF7 DD 6E FD         [19] 2494 	ld	l, -3 (ix)
                                   2495 ;device.c:766: }
      000EFA DD F9            [10] 2496 	ld	sp, ix
      000EFC DD E1            [14] 2497 	pop	ix
      000EFE C9               [10] 2498 	ret
                                   2499 ;device.c:768: void handleEP0IN (WORKAREA* wrk)
                                   2500 ;	---------------------------------
                                   2501 ; Function handleEP0IN
                                   2502 ; ---------------------------------
      000EFF                       2503 _handleEP0IN::
      000EFF DD E5            [15] 2504 	push	ix
      000F01 DD 21 00 00      [14] 2505 	ld	ix,#0
      000F05 DD 39            [15] 2506 	add	ix,sp
      000F07 F5               [11] 2507 	push	af
                                   2508 ;device.c:772: if (wrk->transaction_state!=SETUP && wrk->transaction_state!=DATA) 
      000F08 DD 7E 04         [19] 2509 	ld	a, 4 (ix)
      000F0B DD 77 FE         [19] 2510 	ld	-2 (ix), a
      000F0E DD 7E 05         [19] 2511 	ld	a, 5 (ix)
      000F11 DD 77 FF         [19] 2512 	ld	-1 (ix), a
      000F14 DD 7E FE         [19] 2513 	ld	a, -2 (ix)
      000F17 C6 4F            [ 7] 2514 	add	a, #0x4f
      000F19 4F               [ 4] 2515 	ld	c, a
      000F1A DD 7E FF         [19] 2516 	ld	a, -1 (ix)
      000F1D CE 00            [ 7] 2517 	adc	a, #0x00
      000F1F 47               [ 4] 2518 	ld	b, a
      000F20 0A               [ 7] 2519 	ld	a, (bc)
      000F21 B7               [ 4] 2520 	or	a, a
      000F22 28 0A            [12] 2521 	jr	Z, 00102$
      000F24 3D               [ 4] 2522 	dec	a
      000F25 28 07            [12] 2523 	jr	Z, 00102$
                                   2524 ;device.c:777: writeCommand (CH375_CMD_UNLOCK_USB);
      000F27 2E 23            [ 7] 2525 	ld	l, #0x23
      000F29 CDr00r00         [17] 2526 	call	_writeCommand
                                   2527 ;device.c:778: return;
      000F2C 18 33            [12] 2528 	jr	00109$
      000F2E                       2529 00102$:
                                   2530 ;device.c:780: if (wrk->dataTransferLengthEP0==0) 
      000F2E D1               [10] 2531 	pop	de
      000F2F D5               [11] 2532 	push	de
      000F30 21 47 00         [10] 2533 	ld	hl, #71
      000F33 19               [11] 2534 	add	hl, de
      000F34 7E               [ 7] 2535 	ld	a, (hl)
      000F35 23               [ 6] 2536 	inc	hl
      000F36 B6               [ 7] 2537 	or	a, (hl)
      000F37 20 05            [12] 2538 	jr	NZ, 00105$
                                   2539 ;device.c:782: wrk->transaction_state = STATUS;
      000F39 3E 02            [ 7] 2540 	ld	a, #0x02
      000F3B 02               [ 7] 2541 	ld	(bc), a
      000F3C 18 03            [12] 2542 	jr	00106$
      000F3E                       2543 00105$:
                                   2544 ;device.c:789: wrk->transaction_state = DATA;
      000F3E 3E 01            [ 7] 2545 	ld	a, #0x01
      000F40 02               [ 7] 2546 	ld	(bc), a
      000F41                       2547 00106$:
                                   2548 ;device.c:795: switch(request.r.bRequest)
      000F41 3ArD5r00         [13] 2549 	ld	a, (#(_request + 0x0001) + 0)
      000F44 D6 05            [ 7] 2550 	sub	a, #0x05
      000F46 20 0D            [12] 2551 	jr	NZ, 00108$
                                   2552 ;device.c:802: set_target_device_address (wrk->usb_device_address);
      000F48 C1               [10] 2553 	pop	bc
      000F49 C5               [11] 2554 	push	bc
      000F4A 21 4B 00         [10] 2555 	ld	hl, #75
      000F4D 09               [11] 2556 	add	hl, bc
      000F4E 7E               [ 7] 2557 	ld	a, (hl)
      000F4F F5               [11] 2558 	push	af
      000F50 33               [ 6] 2559 	inc	sp
      000F51 CDr16r04         [17] 2560 	call	_set_target_device_address
      000F54 33               [ 6] 2561 	inc	sp
                                   2562 ;device.c:804: }
      000F55                       2563 00108$:
                                   2564 ;device.c:806: writeDataForEndpoint0 (wrk);
      000F55 E1               [10] 2565 	pop	hl
      000F56 E5               [11] 2566 	push	hl
      000F57 E5               [11] 2567 	push	hl
      000F58 CDr88r02         [17] 2568 	call	_writeDataForEndpoint0
      000F5B F1               [10] 2569 	pop	af
                                   2570 ;device.c:807: writeCommand (CH375_CMD_UNLOCK_USB);
      000F5C 2E 23            [ 7] 2571 	ld	l, #0x23
      000F5E CDr00r00         [17] 2572 	call	_writeCommand
      000F61                       2573 00109$:
                                   2574 ;device.c:808: }
      000F61 DD F9            [10] 2575 	ld	sp, ix
      000F63 DD E1            [14] 2576 	pop	ix
      000F65 C9               [10] 2577 	ret
                                   2578 ;device.c:809: void handleEP0OUT(WORKAREA* wrk)
                                   2579 ;	---------------------------------
                                   2580 ; Function handleEP0OUT
                                   2581 ; ---------------------------------
      000F66                       2582 _handleEP0OUT::
      000F66 DD E5            [15] 2583 	push	ix
      000F68 DD 21 00 00      [14] 2584 	ld	ix,#0
      000F6C DD 39            [15] 2585 	add	ix,sp
      000F6E F5               [11] 2586 	push	af
                                   2587 ;device.c:812: if (wrk->transaction_state!=SETUP && wrk->transaction_state!=DATA) 
      000F6F DD 5E 04         [19] 2588 	ld	e, 4 (ix)
      000F72 DD 56 05         [19] 2589 	ld	d, 5 (ix)
      000F75 21 4F 00         [10] 2590 	ld	hl, #0x004f
      000F78 19               [11] 2591 	add	hl, de
      000F79 4D               [ 4] 2592 	ld	c, l
      000F7A 44               [ 4] 2593 	ld	b, h
      000F7B 0A               [ 7] 2594 	ld	a, (bc)
      000F7C B7               [ 4] 2595 	or	a, a
      000F7D 28 0D            [12] 2596 	jr	Z, 00102$
      000F7F 3D               [ 4] 2597 	dec	a
      000F80 28 0A            [12] 2598 	jr	Z, 00102$
                                   2599 ;device.c:817: sendEP0STALL();
      000F82 CDr7Er02         [17] 2600 	call	_sendEP0STALL
                                   2601 ;device.c:818: writeCommand (CH375_CMD_UNLOCK_USB);
      000F85 2E 23            [ 7] 2602 	ld	l, #0x23
      000F87 CDr00r00         [17] 2603 	call	_writeCommand
                                   2604 ;device.c:819: return;
      000F8A 18 30            [12] 2605 	jr	00110$
      000F8C                       2606 00102$:
                                   2607 ;device.c:821: if (wrk->dataTransferLengthEP0==0) 
      000F8C 21 47 00         [10] 2608 	ld	hl, #0x0047
      000F8F 19               [11] 2609 	add	hl, de
      000F90 E3               [19] 2610 	ex	(sp), hl
      000F91 E1               [10] 2611 	pop	hl
      000F92 E5               [11] 2612 	push	hl
      000F93 7E               [ 7] 2613 	ld	a, (hl)
      000F94 23               [ 6] 2614 	inc	hl
      000F95 B6               [ 7] 2615 	or	a, (hl)
      000F96 20 05            [12] 2616 	jr	NZ, 00105$
                                   2617 ;device.c:823: wrk->transaction_state = STATUS;
      000F98 3E 02            [ 7] 2618 	ld	a, #0x02
      000F9A 02               [ 7] 2619 	ld	(bc), a
      000F9B 18 03            [12] 2620 	jr	00106$
      000F9D                       2621 00105$:
                                   2622 ;device.c:830: wrk->transaction_state = DATA;
      000F9D 3E 01            [ 7] 2623 	ld	a, #0x01
      000F9F 02               [ 7] 2624 	ld	(bc), a
      000FA0                       2625 00106$:
                                   2626 ;device.c:837: uint8_t current_request = request.r.bRequest;
      000FA0 21rD5r00         [10] 2627 	ld	hl, #_request+1
      000FA3 4E               [ 7] 2628 	ld	c, (hl)
                                   2629 ;device.c:840: size_t length = read_usb_data (request.buffer);
      000FA4 C5               [11] 2630 	push	bc
      000FA5 21rD4r00         [10] 2631 	ld	hl, #_request
      000FA8 E5               [11] 2632 	push	hl
      000FA9 CDrDEr03         [17] 2633 	call	_read_usb_data
      000FAC F1               [10] 2634 	pop	af
      000FAD C1               [10] 2635 	pop	bc
                                   2636 ;device.c:853: wrk->dataTransferLengthEP0 = 0;
      000FAE E1               [10] 2637 	pop	hl
      000FAF E5               [11] 2638 	push	hl
      000FB0 AF               [ 4] 2639 	xor	a, a
      000FB1 77               [ 7] 2640 	ld	(hl), a
      000FB2 23               [ 6] 2641 	inc	hl
      000FB3 77               [ 7] 2642 	ld	(hl), a
                                   2643 ;device.c:854: switch(current_request)
      000FB4 79               [ 4] 2644 	ld	a, c
      000FB5 D6 20            [ 7] 2645 	sub	a, #0x20
      000FB7 20 03            [12] 2646 	jr	NZ, 00110$
                                   2647 ;device.c:861: sendEP0ACK ();
      000FB9 CDr6Ar02         [17] 2648 	call	_sendEP0ACK
                                   2649 ;device.c:866: }
      000FBC                       2650 00110$:
                                   2651 ;device.c:867: }
      000FBC DD F9            [10] 2652 	ld	sp, ix
      000FBE DD E1            [14] 2653 	pop	ix
      000FC0 C9               [10] 2654 	ret
                                   2655 ;device.c:868: INTERRUPT_RESULT device_interrupt (WORKAREA* wrk, DEVICE_MODE mode)
                                   2656 ;	---------------------------------
                                   2657 ; Function device_interrupt
                                   2658 ; ---------------------------------
      000FC1                       2659 _device_interrupt::
      000FC1 DD E5            [15] 2660 	push	ix
      000FC3 DD 21 00 00      [14] 2661 	ld	ix,#0
      000FC7 DD 39            [15] 2662 	add	ix,sp
      000FC9 3B               [ 6] 2663 	dec	sp
                                   2664 ;device.c:870: INTERRUPT_RESULT intres = DEVICE_INTERRUPT_OKAY;
      000FCA DD 36 FF 00      [19] 2665 	ld	-1 (ix), #0
                                   2666 ;device.c:873: writeCommand(CH375_CMD_GET_STATUS);
      000FCE 2E 22            [ 7] 2667 	ld	l, #0x22
      000FD0 CDr00r00         [17] 2668 	call	_writeCommand
                                   2669 ;device.c:874: uint8_t interruptType = readData ();
      000FD3 CDr00r00         [17] 2670 	call	_readData
      000FD6 4D               [ 4] 2671 	ld	c, l
                                   2672 ;device.c:876: if((interruptType & USB_BUS_RESET_MASK) == USB_INT_BUS_RESET)
      000FD7 59               [ 4] 2673 	ld	e, c
      000FD8 16 00            [ 7] 2674 	ld	d, #0x00
      000FDA 7B               [ 4] 2675 	ld	a, e
      000FDB E6 03            [ 7] 2676 	and	a, #0x03
      000FDD 5F               [ 4] 2677 	ld	e, a
      000FDE 06 00            [ 7] 2678 	ld	b, #0x00
      000FE0 7B               [ 4] 2679 	ld	a, e
      000FE1 D6 03            [ 7] 2680 	sub	a, #0x03
      000FE3 B0               [ 4] 2681 	or	a, b
      000FE4 20 02            [12] 2682 	jr	NZ, 00102$
                                   2683 ;device.c:877: interruptType = USB_INT_BUS_RESET;
      000FE6 0E 03            [ 7] 2684 	ld	c, #0x03
      000FE8                       2685 00102$:
                                   2686 ;device.c:883: switch(interruptType)
      000FE8 3E 0C            [ 7] 2687 	ld	a, #0x0c
      000FEA 91               [ 4] 2688 	sub	a, c
      000FEB DArA5r10         [10] 2689 	jp	C, 00115$
      000FEE 06 00            [ 7] 2690 	ld	b, #0x00
      000FF0 21rF7r0F         [10] 2691 	ld	hl, #00136$
      000FF3 09               [11] 2692 	add	hl, bc
      000FF4 09               [11] 2693 	add	hl, bc
      000FF5 09               [11] 2694 	add	hl, bc
      000FF6 E9               [ 4] 2695 	jp	(hl)
      000FF7                       2696 00136$:
      000FF7 C3r5Ar10         [10] 2697 	jp	00107$
      000FFA C3r6Er10         [10] 2698 	jp	00109$
      000FFD C3r8Ar10         [10] 2699 	jp	00111$
      001000 C3r2Br10         [10] 2700 	jp	00104$
      001003 C3rA5r10         [10] 2701 	jp	00115$
      001006 C3r1Er10         [10] 2702 	jp	00103$
      001009 C3rA5r10         [10] 2703 	jp	00115$
      00100C C3rA5r10         [10] 2704 	jp	00115$
      00100F C3r4Dr10         [10] 2705 	jp	00106$
      001012 C3r67r10         [10] 2706 	jp	00108$
      001015 C3r78r10         [10] 2707 	jp	00110$
      001018 C3rA5r10         [10] 2708 	jp	00115$
      00101B C3r3Dr10         [10] 2709 	jp	00105$
                                   2710 ;device.c:885: case USB_INT_USB_SUSPEND:
      00101E                       2711 00103$:
                                   2712 ;device.c:886: writeCommand(CH_CMD_ENTER_SLEEP);
      00101E 2E 03            [ 7] 2713 	ld	l, #0x03
      001020 CDr00r00         [17] 2714 	call	_writeCommand
                                   2715 ;device.c:887: writeCommand (CH375_CMD_UNLOCK_USB);
      001023 2E 23            [ 7] 2716 	ld	l, #0x23
      001025 CDr00r00         [17] 2717 	call	_writeCommand
                                   2718 ;device.c:888: break;
      001028 C3rAAr10         [10] 2719 	jp	00116$
                                   2720 ;device.c:889: case USB_INT_BUS_RESET:
      00102B                       2721 00104$:
                                   2722 ;device.c:890: device_reset (wrk);
      00102B DD 6E 04         [19] 2723 	ld	l, 4 (ix)
      00102E DD 66 05         [19] 2724 	ld	h, 5 (ix)
      001031 E5               [11] 2725 	push	hl
      001032 CDr0Br02         [17] 2726 	call	_device_reset
      001035 F1               [10] 2727 	pop	af
                                   2728 ;device.c:891: writeCommand (CH375_CMD_UNLOCK_USB);
      001036 2E 23            [ 7] 2729 	ld	l, #0x23
      001038 CDr00r00         [17] 2730 	call	_writeCommand
                                   2731 ;device.c:892: break;
      00103B 18 6D            [12] 2732 	jr	00116$
                                   2733 ;device.c:894: case USB_INT_EP0_SETUP:
      00103D                       2734 00105$:
                                   2735 ;device.c:895: intres = handleEP0Setup (wrk);
      00103D DD 6E 04         [19] 2736 	ld	l, 4 (ix)
      001040 DD 66 05         [19] 2737 	ld	h, 5 (ix)
      001043 E5               [11] 2738 	push	hl
      001044 CDr9Dr0E         [17] 2739 	call	_handleEP0Setup
      001047 F1               [10] 2740 	pop	af
      001048 DD 75 FF         [19] 2741 	ld	-1 (ix), l
                                   2742 ;device.c:896: break;
      00104B 18 5D            [12] 2743 	jr	00116$
                                   2744 ;device.c:899: case USB_INT_EP0_IN:
      00104D                       2745 00106$:
                                   2746 ;device.c:900: handleEP0IN (wrk);
      00104D DD 6E 04         [19] 2747 	ld	l, 4 (ix)
      001050 DD 66 05         [19] 2748 	ld	h, 5 (ix)
      001053 E5               [11] 2749 	push	hl
      001054 CDrFFr0E         [17] 2750 	call	_handleEP0IN
      001057 F1               [10] 2751 	pop	af
                                   2752 ;device.c:901: break;
      001058 18 50            [12] 2753 	jr	00116$
                                   2754 ;device.c:903: case USB_INT_EP0_OUT:
      00105A                       2755 00107$:
                                   2756 ;device.c:904: handleEP0OUT (wrk);
      00105A DD 6E 04         [19] 2757 	ld	l, 4 (ix)
      00105D DD 66 05         [19] 2758 	ld	h, 5 (ix)
      001060 E5               [11] 2759 	push	hl
      001061 CDr66r0F         [17] 2760 	call	_handleEP0OUT
      001064 F1               [10] 2761 	pop	af
                                   2762 ;device.c:905: break;  
      001065 18 43            [12] 2763 	jr	00116$
                                   2764 ;device.c:907: case USB_INT_EP1_IN:
      001067                       2765 00108$:
                                   2766 ;device.c:911: writeCommand (CH375_CMD_UNLOCK_USB);
      001067 2E 23            [ 7] 2767 	ld	l, #0x23
      001069 CDr00r00         [17] 2768 	call	_writeCommand
                                   2769 ;device.c:912: break;
      00106C 18 3C            [12] 2770 	jr	00116$
                                   2771 ;device.c:913: case USB_INT_EP1_OUT:
      00106E                       2772 00109$:
                                   2773 ;device.c:918: length = read_usb_data (request.buffer);
      00106E 21rD4r00         [10] 2774 	ld	hl, #_request
      001071 E5               [11] 2775 	push	hl
      001072 CDrDEr03         [17] 2776 	call	_read_usb_data
      001075 F1               [10] 2777 	pop	af
                                   2778 ;device.c:927: break;
      001076 18 32            [12] 2779 	jr	00116$
                                   2780 ;device.c:929: case USB_INT_EP2_IN:
      001078                       2781 00110$:
                                   2782 ;device.c:932: writeDataForEndpoint2 (wrk);
      001078 DD 6E 04         [19] 2783 	ld	l, 4 (ix)
      00107B DD 66 05         [19] 2784 	ld	h, 5 (ix)
      00107E E5               [11] 2785 	push	hl
      00107F CDr36r03         [17] 2786 	call	_writeDataForEndpoint2
      001082 F1               [10] 2787 	pop	af
                                   2788 ;device.c:933: writeCommand (CH375_CMD_UNLOCK_USB);
      001083 2E 23            [ 7] 2789 	ld	l, #0x23
      001085 CDr00r00         [17] 2790 	call	_writeCommand
                                   2791 ;device.c:934: break;
      001088 18 20            [12] 2792 	jr	00116$
                                   2793 ;device.c:935: case USB_INT_EP2_OUT:
      00108A                       2794 00111$:
                                   2795 ;device.c:936: if (mode==MONITOR_MODE)
      00108A DD 7E 06         [19] 2796 	ld	a, 6 (ix)
      00108D B7               [ 4] 2797 	or	a, a
      00108E 20 10            [12] 2798 	jr	NZ, 00113$
                                   2799 ;device.c:937: intres = read_and_process_data (wrk);
      001090 DD 6E 04         [19] 2800 	ld	l, 4 (ix)
      001093 DD 66 05         [19] 2801 	ld	h, 5 (ix)
      001096 E5               [11] 2802 	push	hl
      001097 CDrE6r06         [17] 2803 	call	_read_and_process_data
      00109A F1               [10] 2804 	pop	af
      00109B DD 75 FF         [19] 2805 	ld	-1 (ix), l
      00109E 18 0A            [12] 2806 	jr	00116$
      0010A0                       2807 00113$:
                                   2808 ;device.c:939: read_and_send_host ();   
      0010A0 CDrCAr06         [17] 2809 	call	_read_and_send_host
                                   2810 ;device.c:940: break;
      0010A3 18 05            [12] 2811 	jr	00116$
                                   2812 ;device.c:941: default:
      0010A5                       2813 00115$:
                                   2814 ;device.c:945: writeCommand (CH375_CMD_UNLOCK_USB);
      0010A5 2E 23            [ 7] 2815 	ld	l, #0x23
      0010A7 CDr00r00         [17] 2816 	call	_writeCommand
                                   2817 ;device.c:947: }
      0010AA                       2818 00116$:
                                   2819 ;device.c:948: return intres;
      0010AA DD 6E FF         [19] 2820 	ld	l, -1 (ix)
                                   2821 ;device.c:949: }
      0010AD 33               [ 6] 2822 	inc	sp
      0010AE DD E1            [14] 2823 	pop	ix
      0010B0 C9               [10] 2824 	ret
                                   2825 ;device.c:951: bool check_exists ()
                                   2826 ;	---------------------------------
                                   2827 ; Function check_exists
                                   2828 ; ---------------------------------
      0010B1                       2829 _check_exists::
                                   2830 ;device.c:955: writeCommand (CH375_CMD_CHECK_EXIST);
      0010B1 2E 06            [ 7] 2831 	ld	l, #0x06
      0010B3 CDr00r00         [17] 2832 	call	_writeCommand
                                   2833 ;device.c:956: writeData(value);
      0010B6 2E BE            [ 7] 2834 	ld	l, #0xbe
      0010B8 CDr00r00         [17] 2835 	call	_writeData
                                   2836 ;device.c:957: new_value = readData ();
      0010BB CDr00r00         [17] 2837 	call	_readData
      0010BE 7D               [ 4] 2838 	ld	a, l
                                   2839 ;device.c:963: return new_value==value;
      0010BF D6 41            [ 7] 2840 	sub	a, #0x41
      0010C1 3E 01            [ 7] 2841 	ld	a, #0x01
      0010C3 28 01            [12] 2842 	jr	Z, 00104$
      0010C5 AF               [ 4] 2843 	xor	a, a
      0010C6                       2844 00104$:
      0010C6 6F               [ 4] 2845 	ld	l, a
                                   2846 ;device.c:964: }
      0010C7 C9               [10] 2847 	ret
                                   2848 ;device.c:966: bool set_usb_host_mode (uint8_t mode)
                                   2849 ;	---------------------------------
                                   2850 ; Function set_usb_host_mode
                                   2851 ; ---------------------------------
      0010C8                       2852 _set_usb_host_mode::
                                   2853 ;device.c:968: writeCommand(CH375_CMD_SET_USB_MODE);
      0010C8 2E 15            [ 7] 2854 	ld	l, #0x15
      0010CA CDr00r00         [17] 2855 	call	_writeCommand
                                   2856 ;device.c:969: writeData(mode);
      0010CD FD 21 02 00      [14] 2857 	ld	iy, #2
      0010D1 FD 39            [15] 2858 	add	iy, sp
      0010D3 FD 6E 00         [19] 2859 	ld	l, 0 (iy)
      0010D6 CDr00r00         [17] 2860 	call	_writeData
                                   2861 ;device.c:972: for(int i=0; i!=200; i++ )
      0010D9 01 00 00         [10] 2862 	ld	bc, #0x0000
      0010DC                       2863 00105$:
      0010DC 79               [ 4] 2864 	ld	a, c
      0010DD D6 C8            [ 7] 2865 	sub	a, #0xc8
      0010DF B0               [ 4] 2866 	or	a, b
      0010E0 28 10            [12] 2867 	jr	Z, 00103$
                                   2868 ;device.c:974: value = readData();
      0010E2 C5               [11] 2869 	push	bc
      0010E3 CDr00r00         [17] 2870 	call	_readData
      0010E6 7D               [ 4] 2871 	ld	a, l
      0010E7 C1               [10] 2872 	pop	bc
                                   2873 ;device.c:975: if ( value == CH_ST_RET_SUCCESS )
      0010E8 D6 51            [ 7] 2874 	sub	a, #0x51
      0010EA 20 03            [12] 2875 	jr	NZ, 00106$
                                   2876 ;device.c:976: return true;
      0010EC 2E 01            [ 7] 2877 	ld	l, #0x01
      0010EE C9               [10] 2878 	ret
      0010EF                       2879 00106$:
                                   2880 ;device.c:972: for(int i=0; i!=200; i++ )
      0010EF 03               [ 6] 2881 	inc	bc
      0010F0 18 EA            [12] 2882 	jr	00105$
      0010F2                       2883 00103$:
                                   2884 ;device.c:979: return false;
      0010F2 2E 00            [ 7] 2885 	ld	l, #0x00
                                   2886 ;device.c:980: }
      0010F4 C9               [10] 2887 	ret
                                   2888 ;device.c:982: bool device_init ()
                                   2889 ;	---------------------------------
                                   2890 ; Function device_init
                                   2891 ; ---------------------------------
      0010F5                       2892 _device_init::
                                   2893 ;device.c:984: if (!check_exists())
      0010F5 CDrB1r10         [17] 2894 	call	_check_exists
      0010F8 CB 45            [ 8] 2895 	bit	0, l
      0010FA 20 03            [12] 2896 	jr	NZ, 00102$
                                   2897 ;device.c:985: return false;
      0010FC 2E 00            [ 7] 2898 	ld	l, #0x00
      0010FE C9               [10] 2899 	ret
      0010FF                       2900 00102$:
                                   2901 ;device.c:987: writeCommand (CH375_CMD_RESET_ALL);
      0010FF 2E 05            [ 7] 2902 	ld	l, #0x05
      001101 CDr00r00         [17] 2903 	call	_writeCommand
                                   2904 ;device.c:988: host_delay (500);
      001104 21 F4 01         [10] 2905 	ld	hl, #0x01f4
      001107 E5               [11] 2906 	push	hl
      001108 CDr00r00         [17] 2907 	call	_host_delay
                                   2908 ;device.c:990: if (!set_usb_host_mode(CH375_USB_MODE_DEVICE_OUTER_FW))
      00110B 26 01            [ 7] 2909 	ld	h,#0x01
      00110D E3               [19] 2910 	ex	(sp),hl
      00110E 33               [ 6] 2911 	inc	sp
      00110F CDrC8r10         [17] 2912 	call	_set_usb_host_mode
      001112 33               [ 6] 2913 	inc	sp
      001113 CB 45            [ 8] 2914 	bit	0, l
                                   2915 ;device.c:995: return false;
                                   2916 ;device.c:1000: return true;
      001115 2E 00            [ 7] 2917 	ld	l, #0x00
      001117 C8               [11] 2918 	ret	Z
      001118 2E 01            [ 7] 2919 	ld	l, #0x01
                                   2920 ;device.c:1001: }
      00111A C9               [10] 2921 	ret
                                   2922 	.area _CODE
                                   2923 	.area _INITIALIZER
                                   2924 	.area _CABS (ABS)
